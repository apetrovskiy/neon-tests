{
  "uid" : "4889fd8fcac80ddc",
  "name" : "test_tx_lower_100_instruction",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_tx_lower_100_instruction",
  "historyId" : "c2c11495a65daf1fb2ed24af9ab5f05a",
  "time" : {
    "start" : 1645789502271,
    "stop" : 1645789508341,
    "duration" : 6070
  },
  "description" : "Verify we are bill minimum for 100 instruction",
  "descriptionHtml" : "<p>Verify we are bill minimum for 100 instruction</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert -1523809 == 587\n +  where -1523809 = int(((935210547630656643 - 935210571630656643) / 15750))",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7fd781fdac70>\nsol_price = 88.90239700000001\n\n    def test_tx_lower_100_instruction(self, sol_price):\n        \"\"\"Verify we are bill minimum for 100 instruction\"\"\"\n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_path = (pathlib.Path(__file__).parent / \"contracts\" / \"Counter.sol\").absolute()  # Deploy 17 steps\n        compiled = solcx.compile_files([contract_path], output_values=[\"abi\", \"bin\"], solc_version=\"0.8.10\")\n    \n        contract_interface = self.get_compiled_contract(\"Counter\", compiled)\n    \n        contract_deploy_tx = self.web3_client.deploy_contract(\n            self.acc,\n            abi=contract_interface[\"abi\"],\n            bytecode=contract_interface[\"bin\"],\n        )\n    \n        contract = self.web3_client.eth.contract(\n            address=contract_deploy_tx[\"contractAddress\"], abi=contract_interface[\"abi\"]\n        )\n    \n        sol_balance_after_deploy = self.operator.get_solana_balance()\n        neon_balance_after_deploy = self.operator.get_neon_balance()\n    \n        inc_tx = contract.functions.inc().buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n    \n        inc_tx[\"gas\"] = self.web3_client._web3.eth.estimate_gas(inc_tx)\n        inc_tx = self.web3_client.eth.account.sign_transaction(inc_tx, self.acc.key)\n        signature = self.web3_client.eth.send_raw_transaction(inc_tx.rawTransaction)\n        inc_receipt = self.web3_client.eth.wait_for_transaction_receipt(signature)\n    \n        assert contract.functions.get().call() == 1\n>       self.assert_tx_gasused(neon_balance_after_deploy, inc_receipt)\n\nintegration/tests/economy/test_economics.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7fd781fdac70>\nbalance_before = 935210571630656643\ntransaction = AttributeDict({'transactionHash': HexBytes('0x1a801c540705f99c96feebdbc49ac9a96ed4ce50edb127bd4399b010558233d8'), 'tra...0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')})\n\n    @allure.step(\"Verify operator get full gas for TX\")\n    def assert_tx_gasused(self, balance_before, transaction):\n        gas_price = int(self.web3_client.gas_price() / 1000000000)\n        balance = self.operator.get_neon_balance()\n        assert transaction[\"gasUsed\"] == transaction[\"cumulativeGasUsed\"]\n>       assert int((balance - balance_before) / transaction[\"gasUsed\"]) == gas_price\nE       assert -1523809 == 587\nE        +  where -1523809 = int(((935210547630656643 - 935210571630656643) / 15750))\n\nintegration/tests/economy/test_economics.py:50: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1645789477957,
      "stop" : 1645789477957,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1645789477958,
      "stop" : 1645789477960,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1645789477960,
      "stop" : 1645789479001,
      "duration" : 1041
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1645789479001,
      "stop" : 1645789479002,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1645789479002,
      "stop" : 1645789479003,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1645789479003,
      "stop" : 1645789480025,
      "duration" : 1022
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1645789479003,
      "stop" : 1645789479003,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1645789480026,
      "stop" : 1645789480147,
      "duration" : 121
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 88.90239700000001$",
      "time" : {
        "start" : 1645789480147,
        "stop" : 1645789480147,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1645789480148,
      "stop" : 1645789483129,
      "duration" : 2981
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1645789480148,
        "stop" : 1645789480164,
        "duration" : 16
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x5BbDD8C0793F71B2d3547fD9A3cA57046332e61C",
      "time" : {
        "start" : 1645789480164,
        "stop" : 1645789481397,
        "duration" : 1233
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 935214734.6282389 NEON 2058.62773276 SOL",
      "time" : {
        "start" : 1645789483129,
        "stop" : 1645789483129,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1645789502271,
      "stop" : 1645789502271,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1645789502271,
      "stop" : 1645789502271,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Verify we are bill minimum for 100 instruction",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert -1523809 == 587\n +  where -1523809 = int(((935210547630656643 - 935210571630656643) / 15750))",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7fd781fdac70>\nsol_price = 88.90239700000001\n\n    def test_tx_lower_100_instruction(self, sol_price):\n        \"\"\"Verify we are bill minimum for 100 instruction\"\"\"\n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_path = (pathlib.Path(__file__).parent / \"contracts\" / \"Counter.sol\").absolute()  # Deploy 17 steps\n        compiled = solcx.compile_files([contract_path], output_values=[\"abi\", \"bin\"], solc_version=\"0.8.10\")\n    \n        contract_interface = self.get_compiled_contract(\"Counter\", compiled)\n    \n        contract_deploy_tx = self.web3_client.deploy_contract(\n            self.acc,\n            abi=contract_interface[\"abi\"],\n            bytecode=contract_interface[\"bin\"],\n        )\n    \n        contract = self.web3_client.eth.contract(\n            address=contract_deploy_tx[\"contractAddress\"], abi=contract_interface[\"abi\"]\n        )\n    \n        sol_balance_after_deploy = self.operator.get_solana_balance()\n        neon_balance_after_deploy = self.operator.get_neon_balance()\n    \n        inc_tx = contract.functions.inc().buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n    \n        inc_tx[\"gas\"] = self.web3_client._web3.eth.estimate_gas(inc_tx)\n        inc_tx = self.web3_client.eth.account.sign_transaction(inc_tx, self.acc.key)\n        signature = self.web3_client.eth.send_raw_transaction(inc_tx.rawTransaction)\n        inc_receipt = self.web3_client.eth.wait_for_transaction_receipt(signature)\n    \n        assert contract.functions.get().call() == 1\n>       self.assert_tx_gasused(neon_balance_after_deploy, inc_receipt)\n\nintegration/tests/economy/test_economics.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7fd781fdac70>\nbalance_before = 935210571630656643\ntransaction = AttributeDict({'transactionHash': HexBytes('0x1a801c540705f99c96feebdbc49ac9a96ed4ce50edb127bd4399b010558233d8'), 'tra...0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')})\n\n    @allure.step(\"Verify operator get full gas for TX\")\n    def assert_tx_gasused(self, balance_before, transaction):\n        gas_price = int(self.web3_client.gas_price() / 1000000000)\n        balance = self.operator.get_neon_balance()\n        assert transaction[\"gasUsed\"] == transaction[\"cumulativeGasUsed\"]\n>       assert int((balance - balance_before) / transaction[\"gasUsed\"]) == gas_price\nE       assert -1523809 == 587\nE        +  where -1523809 = int(((935210547630656643 - 935210571630656643) / 15750))\n\nintegration/tests/economy/test_economics.py:50: AssertionError",
    "steps" : [ {
      "name" : "Verify operator get full gas for TX",
      "time" : {
        "start" : 1645789507852,
        "stop" : 1645789508340,
        "duration" : 488
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert -1523809 == 587\n +  where -1523809 = int(((935210547630656643 - 935210571630656643) / 15750))\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 50, in assert_tx_gasused\n    assert int((balance - balance_before) / transaction[\"gasUsed\"]) == gas_price\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "balance_before",
        "value" : "935210571630656643"
      }, {
        "name" : "transaction",
        "value" : "AttributeDict({'transactionHash': HexBytes('0x1a801c540705f99c96feebdbc49ac9a96ed4ce50edb127bd4399b010558233d8'), 'transactionIndex': 0, 'blockHash': HexBytes('0xdf24cf895751697d761ae1ca518d8fe0d5b6497ccc4b9147d21f301a05e813bd'), 'blockNumber': 3023188, 'from': '0x5BbDD8C0793F71B2d3547fD9A3cA57046332e61C', 'to': '0xd26605b7d63b65bc781CCbaf70acb5fd051fDc11', 'gasUsed': 15750, 'cumulativeGasUsed': 15750, 'contractAddress': None, 'logs': [], 'status': 1, 'logsBloom': HexBytes('0x})"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1645789517517,
      "stop" : 1645789518323,
      "duration" : 806
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 935206478.6306566 NEON 2058.3417318 SOL",
      "time" : {
        "start" : 1645789518157,
        "stop" : 1645789518157,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 889.919882013 NEON",
      "time" : {
        "start" : 1645789518322,
        "stop" : 1645789518323,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1645789518326,
      "stop" : 1645789518326,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az272-283"
  }, {
    "name" : "thread",
    "value" : "1762-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "8cc7f4ee13a952cc",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/8//#testresult/8cc7f4ee13a952cc",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: [Errno Expecting value] <html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx/1.18.0 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n: 0",
        "time" : {
          "start" : 1645775440373,
          "stop" : 1645775440373,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4889fd8fcac80ddc.json",
  "parameterValues" : [ ]
}