{
  "uid" : "a7322b8f16ae761b",
  "name" : "test_gas_limit_and_gas_price[18446744073709551616-None-insufficient funds for transfer]",
  "fullName" : "integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation#test_gas_limit_and_gas_price",
  "historyId" : "2f4b3a01112eea76efe17145124684ec",
  "time" : {
    "start" : 1650043934085,
    "stop" : 1650043934601,
    "duration" : 516
  },
  "description" : "Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        ",
  "descriptionHtml" : "<p>Too low gas_limit<br />\nToo high gas_limit &gt; u64::max<br />\nToo high gas_limit &gt; u64::max<br />\nToo high gas_price &gt; u64::max<br />\nToo high gas_limit * gas_price &gt; u64::max</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fa0c2503fd0>\ngas_limit = 18446744073709551616, gas_price = None\nexpected_message = 'insufficient funds for transfer', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_gas_limit_and_gas_price(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        \"\"\"\n    \n        amount = InputData.DEFAULT_TRANSFER_AMOUNT.value\n    \n>       self.process_transaction_with_failure(\n            self.sender_account,\n            self.recipient_account,\n            amount,\n            gas=gas_limit,\n            gas_price=gas_price,\n            error_message=expected_message)\n\nintegration/tests/basic/test_transfers.py:390: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fa0c2503fd0>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7fa0c23fe880>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7fa0c23fe220>\namount = 0.01, gas = 18446744073709551616, gas_price = None\nerror_message = 'insufficient funds for transfer'\n\n    def process_transaction_with_failure(\n            self,\n            sender_account: Account,\n            recipient_account: Union[Account, AccountData],\n            amount: int,\n            gas: Optional[int] = 0,\n            gas_price: Optional[int] = None,\n            error_message: str = \"\") -> Union[web3.types.TxReceipt, None]:\n        '''Processes transaction, expects a failure'''\n    \n        tx: Union[web3.types.TxReceipt, None] = None\n        with allure.step(\n                f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"\n        ):\n            with pytest.raises(Exception) as error_info:\n                tx = self.web3_client.send_neon(sender_account,\n                                                recipient_account, amount, gas,\n                                                gas_price)\n    \n            if error_info != None:\n    \n                if error_message:\n>                   assert error_message in str(error_info)\nE                   AssertionError\n\nintegration/tests/basic/helpers/basic.py:109: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1650043734743,
      "stop" : 1650043734745,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650043734743,
      "stop" : 1650043734743,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650043734745,
      "stop" : 1650043735824,
      "duration" : 1079
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650043735824,
      "stop" : 1650043735824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650043735824,
      "stop" : 1650043735824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "jsonrpc_requester",
    "time" : {
      "start" : 1650043735824,
      "stop" : 1650043735824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650043735825,
      "stop" : 1650043735825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650043927117,
      "stop" : 1650043928775,
      "duration" : 1658
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650043927117,
        "stop" : 1650043927122,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x9729DDEBe662F692c0594cB99c69e1Ea897a5ef2",
      "time" : {
        "start" : 1650043927122,
        "stop" : 1650043928123,
        "duration" : 1001
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 968149245.0 NEON 4912.18059108 SOL",
      "time" : {
        "start" : 1650043928775,
        "stop" : 1650043928775,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650043932735,
      "stop" : 1650043932735,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_accounts",
    "time" : {
      "start" : 1650043932736,
      "stop" : 1650043934084,
      "duration" : 1348
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_json_rpc_requester",
    "time" : {
      "start" : 1650043932736,
      "stop" : 1650043932736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650043932736,
      "stop" : 1650043932736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fa0c2503fd0>\ngas_limit = 18446744073709551616, gas_price = None\nexpected_message = 'insufficient funds for transfer', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_gas_limit_and_gas_price(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        \"\"\"\n    \n        amount = InputData.DEFAULT_TRANSFER_AMOUNT.value\n    \n>       self.process_transaction_with_failure(\n            self.sender_account,\n            self.recipient_account,\n            amount,\n            gas=gas_limit,\n            gas_price=gas_price,\n            error_message=expected_message)\n\nintegration/tests/basic/test_transfers.py:390: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fa0c2503fd0>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7fa0c23fe880>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7fa0c23fe220>\namount = 0.01, gas = 18446744073709551616, gas_price = None\nerror_message = 'insufficient funds for transfer'\n\n    def process_transaction_with_failure(\n            self,\n            sender_account: Account,\n            recipient_account: Union[Account, AccountData],\n            amount: int,\n            gas: Optional[int] = 0,\n            gas_price: Optional[int] = None,\n            error_message: str = \"\") -> Union[web3.types.TxReceipt, None]:\n        '''Processes transaction, expects a failure'''\n    \n        tx: Union[web3.types.TxReceipt, None] = None\n        with allure.step(\n                f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"\n        ):\n            with pytest.raises(Exception) as error_info:\n                tx = self.web3_client.send_neon(sender_account,\n                                                recipient_account, amount, gas,\n                                                gas_price)\n    \n            if error_info != None:\n    \n                if error_message:\n>                   assert error_message in str(error_info)\nE                   AssertionError\n\nintegration/tests/basic/helpers/basic.py:109: AssertionError",
    "steps" : [ {
      "name" : "Sending 0.01 from 0xD94f2fd804f73c96bFb5e581A51367606CE7a66C to 0x974A27f25Df5be0b7c02da40f465b80121C50210",
      "time" : {
        "start" : 1650043934085,
        "stop" : 1650043934601,
        "duration" : 516
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helpers/basic.py\", line 109, in process_transaction_with_failure\n    assert error_message in str(error_info)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_accounts::0",
    "time" : {
      "start" : 1650043934615,
      "stop" : 1650043934615,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650043982859,
      "stop" : 1650043983680,
      "duration" : 821
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 968149035.0 NEON 4912.1148864 SOL",
      "time" : {
        "start" : 1650043983512,
        "stop" : 1650043983512,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650043983680,
        "stop" : 1650043983680,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650043983689,
      "stop" : 1650043983689,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: Json-RPC call tests - transactions validation"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestRpcCallsTransactionsValidation"
  }, {
    "name" : "host",
    "value" : "fv-az447-715"
  }, {
    "name" : "thread",
    "value" : "1858-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_message",
    "value" : "'insufficient funds for transfer'"
  }, {
    "name" : "gas_limit",
    "value" : "18446744073709551616"
  }, {
    "name" : "gas_price",
    "value" : "None"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 15,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 15
      },
      "items" : [ {
        "uid" : "658291adc708326f",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/876//#testresult/658291adc708326f",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650043189132,
          "stop" : 1650043189653,
          "duration" : 521
        }
      }, {
        "uid" : "81669339bffc9867",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/874//#testresult/81669339bffc9867",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650042438170,
          "stop" : 1650042438481,
          "duration" : 311
        }
      }, {
        "uid" : "37264b0b7e9bf1f4",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/872//#testresult/37264b0b7e9bf1f4",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650041333531,
          "stop" : 1650041333839,
          "duration" : 308
        }
      }, {
        "uid" : "54154c477cf3ab6c",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/870//#testresult/54154c477cf3ab6c",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650040356118,
          "stop" : 1650040356519,
          "duration" : 401
        }
      }, {
        "uid" : "789ff66a53dd7a81",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/868//#testresult/789ff66a53dd7a81",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650039034711,
          "stop" : 1650039035021,
          "duration" : 310
        }
      }, {
        "uid" : "3cbeeb09e379db1",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/866//#testresult/3cbeeb09e379db1",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650038241942,
          "stop" : 1650038242341,
          "duration" : 399
        }
      }, {
        "uid" : "fe8ac8fcf3849122",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/864//#testresult/fe8ac8fcf3849122",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650036663540,
          "stop" : 1650036664050,
          "duration" : 510
        }
      }, {
        "uid" : "5976964fd11208e2",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/862//#testresult/5976964fd11208e2",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650035483431,
          "stop" : 1650035483947,
          "duration" : 516
        }
      }, {
        "uid" : "562734b5ed7eb310",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/860//#testresult/562734b5ed7eb310",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650034609183,
          "stop" : 1650034609489,
          "duration" : 306
        }
      }, {
        "uid" : "37701b58d222110c",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/858//#testresult/37701b58d222110c",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650032596094,
          "stop" : 1650032596607,
          "duration" : 513
        }
      }, {
        "uid" : "1458c7b48f731da8",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/856//#testresult/1458c7b48f731da8",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650031747137,
          "stop" : 1650031747668,
          "duration" : 531
        }
      }, {
        "uid" : "dacfb349e4d70278",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/854//#testresult/dacfb349e4d70278",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650026762313,
          "stop" : 1650026762826,
          "duration" : 513
        }
      }, {
        "uid" : "53d3f144cccb213a",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/852//#testresult/53d3f144cccb213a",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650026300589,
          "stop" : 1650026301107,
          "duration" : 518
        }
      }, {
        "uid" : "3c0aa6646730bae0",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/850//#testresult/3c0aa6646730bae0",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650026244663,
          "stop" : 1650026245177,
          "duration" : 514
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "a7322b8f16ae761b.json",
  "parameterValues" : [ "'insufficient funds for transfer'", "18446744073709551616", "None" ]
}