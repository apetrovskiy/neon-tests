{
  "uid" : "4b4757e66a1912dae1a509f688f20b0f",
  "children" : [ {
    "name" : "Test defects",
    "children" : [ {
      "name" : "ValueError: {'code': -32000, 'message': 'relation \"neon_transactions\" does not exist\\nLINE 3:               FROM neon_transactions AS a\\n                           ^\\n'}",
      "children" : [ {
        "name" : "test_rpc_call_eth_getBlockByHash",
        "uid" : "c0d2b9a529293bc9",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114292456,
          "stop" : 1650114293215,
          "duration" : 759
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_rpc_call_eth_getBlockByNumber_via_numbers",
        "uid" : "6e6f214a4a7ff2cf",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114295261,
          "stop" : 1650114295893,
          "duration" : 632
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_send_neon_from_one_account_to_another[1]",
        "uid" : "66fd2986944d1af",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114415148,
          "stop" : 1650114416368,
          "duration" : 1220
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "1" ]
      }, {
        "name" : "test_send_neon_from_one_account_to_another[1.1]",
        "uid" : "687dee90509d846c",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114417624,
          "stop" : 1650114418262,
          "duration" : 638
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "1.1" ]
      }, {
        "name" : "test_zero_neon",
        "uid" : "ed3adce12fd8ca18",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114422976,
          "stop" : 1650114423621,
          "duration" : 645
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : true,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_rpc_call_eth_getTransactionCount",
        "uid" : "dbcb9730ebcdf15f",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114432105,
          "stop" : 1650114432749,
          "duration" : 644
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : true,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_rpc_call_eth_getTransactionByHash",
        "uid" : "13c13eeb55272878",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114436200,
          "stop" : 1650114436931,
          "duration" : 731
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : true,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_rpc_call_eth_getTransactionReceipt",
        "uid" : "7b4938b8e5f82752",
        "parentUid" : "69453fb2bc7653d0a16f1bd046aaf65a",
        "status" : "broken",
        "time" : {
          "start" : 1650114438225,
          "stop" : 1650114438862,
          "duration" : 637
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      } ],
      "uid" : "69453fb2bc7653d0a16f1bd046aaf65a"
    }, {
      "name" : "TypeError: Transaction must include these fields: {'gasPrice'}",
      "children" : [ {
        "name" : "test_generate_bad_sign[1-None-gas limit reached]",
        "uid" : "e5dfa35740d20225",
        "parentUid" : "d97ad279c0d5b61a80528dcb71ce98f5",
        "status" : "broken",
        "time" : {
          "start" : 1650114452723,
          "stop" : 1650114452828,
          "duration" : 105
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'gas limit reached'", "1", "None" ]
      }, {
        "name" : "test_generate_bad_sign[0.01-None-Transaction had invalid fields: {'gas']",
        "uid" : "efd79a698949c401",
        "parentUid" : "d97ad279c0d5b61a80528dcb71ce98f5",
        "status" : "broken",
        "time" : {
          "start" : 1650114454062,
          "stop" : 1650114454166,
          "duration" : 104
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'Transaction had invalid fields: {'gas''", "0.01", "None" ]
      }, {
        "name" : "test_generate_bad_sign[18446744073709551616-None-insufficient funds for transfer]",
        "uid" : "94a63a3169e618c",
        "parentUid" : "d97ad279c0d5b61a80528dcb71ce98f5",
        "status" : "broken",
        "time" : {
          "start" : 1650114455399,
          "stop" : 1650114455506,
          "duration" : 107
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "18446744073709551616", "None" ]
      } ],
      "uid" : "d97ad279c0d5b61a80528dcb71ce98f5"
    } ],
    "uid" : "bdbf199525818fae7a8651db9eafe741"
  }, {
    "name" : "Product defects",
    "children" : [ {
      "name" : "AssertionError: <AssertMessage.CONTAINS_ERROR: 'Contains the error data'>\nassert False\n +  where False = <bound method BasicTests.assert_no_error_object of <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e13d44c0>>(JsonRpcErrorResponse(id=77, error={'code': -32000, 'message': 'relation \"neon_transaction_logs\" does not exist\\nLINE 1: SELECT * FROM neon_transaction_logs WHERE address IN (\\'0xed3...\\n                      ^\\n'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_no_error_object of <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e13d44c0>> = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e13d44c0>.assert_no_error_object",
      "children" : [ {
        "name" : "test_rpc_call_eth_getLogs_via_tags[latest-latest]",
        "uid" : "2b90ea0f5e3a29ed",
        "parentUid" : "17624c91f761d99389ae42d287b39b79",
        "status" : "failed",
        "time" : {
          "start" : 1650114301213,
          "stop" : 1650114301913,
          "duration" : 700
        },
        "flaky" : false,
        "newFailed" : true,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'latest'", "'latest'" ]
      } ],
      "uid" : "17624c91f761d99389ae42d287b39b79"
    }, {
      "name" : "AssertionError: <AssertMessage.CONTAINS_ERROR: 'Contains the error data'>\nassert False\n +  where False = <bound method BasicTests.assert_no_error_object of <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e146a2e0>>(JsonRpcErrorResponse(id=5, error={'code': -32000, 'message': 'relation \"neon_transaction_logs\" does not exist\\nLINE 1: SELECT * FROM neon_transaction_logs WHERE address IN (\\'0x2ae...\\n                      ^\\n'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_no_error_object of <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e146a2e0>> = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e146a2e0>.assert_no_error_object",
      "children" : [ {
        "name" : "test_rpc_call_eth_getLogs_via_tags[pending-latest]",
        "uid" : "52a2a3c3584c7f1e",
        "parentUid" : "ddcf8890dc3dc91cfcf6d1bfc0cc3b81",
        "status" : "failed",
        "time" : {
          "start" : 1650114302631,
          "stop" : 1650114303331,
          "duration" : 700
        },
        "flaky" : false,
        "newFailed" : true,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'pending'", "'latest'" ]
      } ],
      "uid" : "ddcf8890dc3dc91cfcf6d1bfc0cc3b81"
    }, {
      "name" : "AssertionError: <AssertMessage.CONTAINS_ERROR: 'Contains the error data'>\nassert False\n +  where False = <bound method BasicTests.assert_no_error_object of <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e12c4d30>>(JsonRpcErrorResponse(id=5, error={'code': -32000, 'message': 'relation \"neon_transaction_logs\" does not exist\\nLINE 1: SELECT * FROM neon_transaction_logs WHERE address IN (\\'0xfcc...\\n                      ^\\n'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_no_error_object of <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e12c4d30>> = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7f22e12c4d30>.assert_no_error_object",
      "children" : [ {
        "name" : "test_rpc_call_eth_getLogs_via_tags[latest-pending]",
        "uid" : "f0f3bcfa7aea17c2",
        "parentUid" : "ac8f2e1386f21874ce1cc5193e8fa2ab",
        "status" : "failed",
        "time" : {
          "start" : 1650114304049,
          "stop" : 1650114304749,
          "duration" : 700
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'latest'", "'pending'" ]
      } ],
      "uid" : "ac8f2e1386f21874ce1cc5193e8fa2ab"
    }, {
      "name" : "AssertionError",
      "children" : [ {
        "name" : "test_send_more_than_exist_on_account_neon[1501]",
        "uid" : "9b134cb5367e5dfc",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114419517,
          "stop" : 1650114420016,
          "duration" : 499
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "1501" ]
      }, {
        "name" : "test_send_more_than_exist_on_account_neon[10000.1]",
        "uid" : "c6b88b6cb749bf89",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114421243,
          "stop" : 1650114421744,
          "duration" : 501
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "10000.1" ]
      }, {
        "name" : "test_there_are_not_enough_neons_for_gas_fee",
        "uid" : "3df25655a1317535",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114426979,
          "stop" : 1650114428195,
          "duration" : 1216
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_there_are_not_enough_neons_for_transfer",
        "uid" : "d8bf7f5d2ccb04ea",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114428211,
          "stop" : 1650114429320,
          "duration" : 1109
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      }, {
        "name" : "test_gas_limit_and_gas_price[1-None-gas limit reached]",
        "uid" : "8526002e6450e609",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114443417,
          "stop" : 1650114443745,
          "duration" : 328
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'gas limit reached'", "1", "None" ]
      }, {
        "name" : "test_gas_limit_and_gas_price[18446744073709551616-None-insufficient funds for transfer]",
        "uid" : "48abe4c1dd36ac35",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114446583,
          "stop" : 1650114446888,
          "duration" : 305
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "18446744073709551616", "None" ]
      }, {
        "name" : "test_gas_limit_and_gas_price[0-18446744073709551616-insufficient funds for transfer]",
        "uid" : "45f76952993df85e",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114448112,
          "stop" : 1650114448631,
          "duration" : 519
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "0", "18446744073709551616" ]
      }, {
        "name" : "test_gas_limit_and_gas_price[1-18446744073709551616-insufficient funds for transfer]",
        "uid" : "95b9b5b8582f637",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114449853,
          "stop" : 1650114450063,
          "duration" : 210
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "1", "18446744073709551616" ]
      }, {
        "name" : "test_gas_limit_and_gas_price[1000-18446744073709552-insufficient funds for transfer]",
        "uid" : "a16a6119e90bdbaa",
        "parentUid" : "a0017ad855102fea08b8682d27fec4ca",
        "status" : "failed",
        "time" : {
          "start" : 1650114451287,
          "stop" : 1650114451495,
          "duration" : 208
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "1000", "18446744073709552" ]
      } ],
      "uid" : "a0017ad855102fea08b8682d27fec4ca"
    }, {
      "name" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactions object at 0x7f22e17ca940>>(JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'relation \"neon_transactions\" does not exist\\nLINE 3:               FROM neon_transactions AS a\\n                           ^\\n'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactions object at 0x7f22e17ca940>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactions object at 0x7f22e17ca940>.assert_is_successful_response",
      "children" : [ {
        "name" : "test_check_erc_1820_transaction",
        "uid" : "b2a974a75778e318",
        "parentUid" : "fd4d0581a6db8eaa5e4c5eba89b70f1a",
        "status" : "failed",
        "time" : {
          "start" : 1650114440116,
          "stop" : 1650114440554,
          "duration" : 438
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ ]
      } ],
      "uid" : "fd4d0581a6db8eaa5e4c5eba89b70f1a"
    }, {
      "name" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11e8be0>>(JsonRpcErrorResponse(id=34, error={'code': -32000, 'message': 'relation \"neon_transactions\" does not exist\\nLINE 3:               FROM neon_transactions AS a\\n                           ^\\n'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11e8be0>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11e8be0>.assert_is_successful_response",
      "children" : [ {
        "name" : "test_generate_bad_sign[0-18446744073709551616-insufficient funds for transfer]",
        "uid" : "6ecdb7d6f32e2ccf",
        "parentUid" : "aa720d7ea78fd03b76434855b1c668ae",
        "status" : "failed",
        "time" : {
          "start" : 1650114456741,
          "stop" : 1650114456990,
          "duration" : 249
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "0", "18446744073709551616" ]
      } ],
      "uid" : "aa720d7ea78fd03b76434855b1c668ae"
    }, {
      "name" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e1201b50>>(JsonRpcErrorResponse(id=65, error={'code': -32000, 'message': 'The account balance is less than required: Account 75b7...= 1; fee = 18446744073709551616; value = 20000000000000000; required_balance = 18466744073709551616; '}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e1201b50>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e1201b50>.assert_is_successful_response",
      "children" : [ {
        "name" : "test_generate_bad_sign[1-18446744073709551616-insufficient funds for transfer]",
        "uid" : "f1c53fdf4b8249b3",
        "parentUid" : "95e7158f573cc6eca2795e631af044d9",
        "status" : "failed",
        "time" : {
          "start" : 1650114458219,
          "stop" : 1650114458427,
          "duration" : 208
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "1", "18446744073709551616" ]
      } ],
      "uid" : "95e7158f573cc6eca2795e631af044d9"
    }, {
      "name" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11faeb0>>(JsonRpcErrorResponse(id=42, error={'code': -32000, 'message': 'The account balance is less than required: Account 89de...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11faeb0>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11faeb0>.assert_is_successful_response",
      "children" : [ {
        "name" : "test_generate_bad_sign[1000-18446744073709552-insufficient funds for transfer]",
        "uid" : "9812573c610e5c04",
        "parentUid" : "4527f5fe41ecc77c08d5dfd66a3269ad",
        "status" : "failed",
        "time" : {
          "start" : 1650114459653,
          "stop" : 1650114459872,
          "duration" : 219
        },
        "flaky" : false,
        "newFailed" : false,
        "newPassed" : false,
        "newBroken" : false,
        "retriesCount" : 0,
        "retriesStatusChange" : false,
        "parameters" : [ "'insufficient funds for transfer'", "1000", "18446744073709552" ]
      } ],
      "uid" : "4527f5fe41ecc77c08d5dfd66a3269ad"
    } ],
    "uid" : "8fb3a91ba5aaf9de24cc8a92edc82b5d"
  } ],
  "name" : "categories"
}