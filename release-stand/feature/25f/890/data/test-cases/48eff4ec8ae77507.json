{
  "uid" : "48eff4ec8ae77507",
  "name" : "test_generate_bad_sign[1000-18446744073709552-insufficient funds for transfer]",
  "fullName" : "integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation#test_generate_bad_sign",
  "historyId" : "d8edfb1e8eddb0b68383491a3f78b9bf",
  "time" : {
    "start" : 1650121773860,
    "stop" : 1650121774125,
    "duration" : 265
  },
  "description" : "Generate bad sign (when v, r, s over allowed size)",
  "descriptionHtml" : "<p>Generate bad sign (when v, r, s over allowed size)</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Actual result JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05c8; balance = 5000000000000000000; gasPrice = 18446744073709552; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0')\nassert 'insufficient funds for transfer' in {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}\n +  where {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '} = JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb9...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0').error",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f851d231640>\ngas_limit = 1000, gas_price = 18446744073709552\nexpected_message = 'insufficient funds for transfer', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    # def test_gas_limit_and_gas_price(self, gas_limit, gas_price, expected_message, prepare_accounts):\n    #     \"\"\"Too low gas_limit\n    #     Too high gas_limit > u64::max\n    #     Too high gas_limit > u64::max\n    #     Too high gas_price > u64::max\n    #     Too high gas_limit * gas_price > u64::max\n    #     \"\"\"\n    \n    #     amount = InputData.DEFAULT_TRANSFER_AMOUNT.value\n    \n    #     self.process_transaction_with_failure(\n    #         self.sender_account,\n    #         self.recipient_account,\n    #         amount,\n    #         gas=gas_limit,\n    #         gas_price=gas_price,\n    #         error_message=expected_message)\n    \n    #     self.assert_balance(self.sender_account.address,\n    #                         InputData.FAUCET_1ST_REQUEST_AMOUNT.value)\n    #     self.assert_balance(self.recipient_account.address,\n    #                         InputData.FAUCET_1ST_REQUEST_AMOUNT.value)\n    \n    # @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\"\"\"\n    \n        transaction = self.get_transaction_data(gas_limit=gas_limit,gas_price=gas_price)\n    \n        signed_tx = self.web3_client.eth.account.sign_transaction(\n            transaction, self.sender_account.key)\n    \n        #\n        print(\"=============================\")\n        print(signed_tx)\n        #\n    \n    \n    \n        params = [signed_tx.rawTransaction.hex()]\n    \n        model = RpcRequestFactory.get_send_raw_trx(params=params)\n    \n        response = self.jsonrpc_requester.request_json_rpc(model)\n        actual_result = self.jsonrpc_requester.deserialize_response(response)\n    \n        assert actual_result.id == model.id, AssertMessage.WRONG_ID.value\n        # assert self.assert_is_successful_response(\n        #     actual_result), AssertMessage.WRONG_TYPE.value\n>       assert expected_message in actual_result.error, f\"Actual result {actual_result}\"\nE       AssertionError: Actual result JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05c8; balance = 5000000000000000000; gasPrice = 18446744073709552; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0')\nE       assert 'insufficient funds for transfer' in {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}\nE        +  where {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '} = JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb9...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0').error\n\nintegration/tests/basic/test_transfers.py:407: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1650121597352,
      "stop" : 1650121597354,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650121597352,
      "stop" : 1650121597352,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650121597354,
      "stop" : 1650121598328,
      "duration" : 974
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650121598328,
      "stop" : 1650121598328,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650121598328,
      "stop" : 1650121598328,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650121598328,
      "stop" : 1650121598328,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "jsonrpc_requester",
    "time" : {
      "start" : 1650121598328,
      "stop" : 1650121598328,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650121763822,
      "stop" : 1650121765206,
      "duration" : 1384
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650121763822,
        "stop" : 1650121763826,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xF70539f9CC018c1A26685B977A7cFCf3118b2475",
      "time" : {
        "start" : 1650121763826,
        "stop" : 1650121764707,
        "duration" : 881
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 965426594.0 NEON 4901.78443432 SOL",
      "time" : {
        "start" : 1650121765206,
        "stop" : 1650121765206,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_json_rpc_requester",
    "time" : {
      "start" : 1650121772586,
      "stop" : 1650121772586,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650121772586,
      "stop" : 1650121772586,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650121772586,
      "stop" : 1650121772586,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_accounts",
    "time" : {
      "start" : 1650121772587,
      "stop" : 1650121773859,
      "duration" : 1272
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Generate bad sign (when v, r, s over allowed size)",
    "status" : "failed",
    "statusMessage" : "AssertionError: Actual result JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05c8; balance = 5000000000000000000; gasPrice = 18446744073709552; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0')\nassert 'insufficient funds for transfer' in {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}\n +  where {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '} = JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb9...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0').error",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f851d231640>\ngas_limit = 1000, gas_price = 18446744073709552\nexpected_message = 'insufficient funds for transfer', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    # def test_gas_limit_and_gas_price(self, gas_limit, gas_price, expected_message, prepare_accounts):\n    #     \"\"\"Too low gas_limit\n    #     Too high gas_limit > u64::max\n    #     Too high gas_limit > u64::max\n    #     Too high gas_price > u64::max\n    #     Too high gas_limit * gas_price > u64::max\n    #     \"\"\"\n    \n    #     amount = InputData.DEFAULT_TRANSFER_AMOUNT.value\n    \n    #     self.process_transaction_with_failure(\n    #         self.sender_account,\n    #         self.recipient_account,\n    #         amount,\n    #         gas=gas_limit,\n    #         gas_price=gas_price,\n    #         error_message=expected_message)\n    \n    #     self.assert_balance(self.sender_account.address,\n    #                         InputData.FAUCET_1ST_REQUEST_AMOUNT.value)\n    #     self.assert_balance(self.recipient_account.address,\n    #                         InputData.FAUCET_1ST_REQUEST_AMOUNT.value)\n    \n    # @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\"\"\"\n    \n        transaction = self.get_transaction_data(gas_limit=gas_limit,gas_price=gas_price)\n    \n        signed_tx = self.web3_client.eth.account.sign_transaction(\n            transaction, self.sender_account.key)\n    \n        #\n        print(\"=============================\")\n        print(signed_tx)\n        #\n    \n    \n    \n        params = [signed_tx.rawTransaction.hex()]\n    \n        model = RpcRequestFactory.get_send_raw_trx(params=params)\n    \n        response = self.jsonrpc_requester.request_json_rpc(model)\n        actual_result = self.jsonrpc_requester.deserialize_response(response)\n    \n        assert actual_result.id == model.id, AssertMessage.WRONG_ID.value\n        # assert self.assert_is_successful_response(\n        #     actual_result), AssertMessage.WRONG_TYPE.value\n>       assert expected_message in actual_result.error, f\"Actual result {actual_result}\"\nE       AssertionError: Actual result JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05c8; balance = 5000000000000000000; gasPrice = 18446744073709552; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0')\nE       assert 'insufficient funds for transfer' in {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}\nE        +  where {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '} = JsonRpcErrorResponse(id=32, error={'code': -32000, 'message': 'The account balance is less than required: Account 7eb9...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0').error\n\nintegration/tests/basic/test_transfers.py:407: AssertionError",
    "steps" : [ {
      "name" : "Request: JsonRpcRequest(id=32, method='eth_sendRawTransaction', params=['0xf86f80874189374bc6a7f08203e894b36af16fb4e77d35b46999d0025f3c772b9ac2de87470de4df82000080820101a094d1fde32cf3219b0ad1aeb7679f1a8804471d839f805ee38940da511fa06e8ca03c3a5d4e9cd3478300894993a05269b59c6fdf60baa0daa5baa133e2463fd2d5'], jsonrpc='2.0')",
      "time" : {
        "start" : 1650121773997,
        "stop" : 1650121774125,
        "duration" : 128
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Response: {'jsonrpc': '2.0', 'id': 32, 'error': {'code': -32000, 'message': 'The account balance is less than required: Account 7eb966ed64c1bef396d735324d49dfffd1cf05c8; balance = 5000000000000000000; gasPrice = 18446744073709552; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}}",
      "time" : {
        "start" : 1650121774125,
        "stop" : 1650121774125,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "3c54c2e94330102a",
      "name" : "stdout",
      "source" : "3c54c2e94330102a.txt",
      "type" : "text/plain",
      "size" : 559
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_accounts::0",
    "time" : {
      "start" : 1650121774133,
      "stop" : 1650121774133,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650121774134,
      "stop" : 1650121774754,
      "duration" : 620
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 965426534.0 NEON 4901.76566584 SOL",
      "time" : {
        "start" : 1650121774625,
        "stop" : 1650121774625,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650121774754,
        "stop" : 1650121774754,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650121774759,
      "stop" : 1650121774759,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: Json-RPC call tests - transactions validation"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestRpcCallsTransactionsValidation"
  }, {
    "name" : "host",
    "value" : "fv-az296-782"
  }, {
    "name" : "thread",
    "value" : "1816-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_message",
    "value" : "'insufficient funds for transfer'"
  }, {
    "name" : "gas_limit",
    "value" : "1000"
  }, {
    "name" : "gas_price",
    "value" : "18446744073709552"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "ef8a1a7181cbb9cf",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/888//#testresult/ef8a1a7181cbb9cf",
        "status" : "failed",
        "statusDetails" : "AssertionError: Actual result JsonRpcErrorResponse(id=75, error={'code': -32000, 'message': 'The account balance is less than required: Account acb80662ac61f19ec625796d344ebe44e301e492; balance = 5000000000000000000; gasPrice = 18446744073709552; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0')\nassert 'insufficient funds for transfer' in {'code': -32000, 'message': 'The account balance is less than required: Account acb80662ac61f19ec625796d344ebe44e301e4...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}\n +  where {'code': -32000, 'message': 'The account balance is less than required: Account acb80662ac61f19ec625796d344ebe44e301e4...52; gasLimit = 1000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '} = JsonRpcErrorResponse(id=75, error={'code': -32000, 'message': 'The account balance is less than required: Account acb8...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0').error",
        "time" : {
          "start" : 1650116912922,
          "stop" : 1650116913127,
          "duration" : 205
        }
      }, {
        "uid" : "9812573c610e5c04",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/886//#testresult/9812573c610e5c04",
        "status" : "failed",
        "statusDetails" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11faeb0>>(JsonRpcErrorResponse(id=42, error={'code': -32000, 'message': 'The account balance is less than required: Account 89de...000; fee = 18446744073709552000; value = 20000000000000000; required_balance = 18466744073709552000; '}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11faeb0>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f22e11faeb0>.assert_is_successful_response",
        "time" : {
          "start" : 1650114459653,
          "stop" : 1650114459872,
          "duration" : 219
        }
      }, {
        "uid" : "bf3121746f030e70",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/25f/884//#testresult/bf3121746f030e70",
        "status" : "failed",
        "statusDetails" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fc0fdeb7400>>(JsonRpcErrorResponse(id=45, error={'code': -32000, 'message': 'The account balance is less than required: Account 7295...0; fee = 387381625547900592000; value = 20000000000000000; required_balance = 387401625547900592000; '}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fc0fdeb7400>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7fc0fdeb7400>.assert_is_successful_response",
        "time" : {
          "start" : 1650048147989,
          "stop" : 1650048148849,
          "duration" : 860
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "48eff4ec8ae77507.json",
  "parameterValues" : [ "'insufficient funds for transfer'", "1000", "18446744073709552" ]
}