{
  "uid" : "7eb429cf595fe1ca",
  "name" : "test_send_neon_from_one_account_to_another[1.1]",
  "fullName" : "integration.tests.basic.test_transfers.TestTransfer#test_send_neon_from_one_account_to_another",
  "historyId" : "ff2420b6a43fdd9d117c55d476cfa1b5",
  "time" : {
    "start" : 1645200858443,
    "stop" : 1645200860200,
    "duration" : 1757
  },
  "description" : "Send neon from one account to another",
  "descriptionHtml" : "<p>Send neon from one account to another</p>\n",
  "status" : "broken",
  "statusMessage" : "AttributeError: 'ValueError' object has no attribute 'value'",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fc3bb3ca430>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>\namount = 1.1, gas = 10000, gas_price = 1000000000\nmessage = 'InvalidInstructionData'\n\n    @allure.step(\"processing transaction\")\n    def process_transaction(self,\n                            sender_account: Account,\n                            recipient_account: Account,\n                            amount: int,\n                            gas: int = GAS,\n                            gas_price: int = GAS_PRICE,\n                            message: str = \"\"):\n        try:\n            # with pytest.raises(ValueError) as error_info:\n            #     self.web3_client.send_neon(sender_account, recipient_account,\n            #                                amount, gas, gas_price)\n            #     print(error_info)\n            # assert message in str(error_info.value)\n    \n    \n>           self.web3_client.send_neon(sender_account, recipient_account,\n                                        amount, gas, gas_price)\n\nintegration/tests/basic/helper_methods.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7fc3bb6c9100>\nfrom_ = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>\nto = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>\namount = 1.1, gas = 10000, gas_price = 1000000000\n\n    def send_neon(\n        self,\n        from_: eth_account.signers.local.LocalAccount,\n        to: tp.Union[str, eth_account.signers.local.LocalAccount],\n        amount: tp.Union[int, float, Decimal],\n        gas: int = 100000000,\n        gas_price: tp.Optional[int] = None,\n    ) -> web3.types.TxReceipt:\n        to_addr = to if isinstance(to, str) else to.address\n        gas_price = gas_price or self.gas_price()\n        transaction = {\n            \"to\": to_addr,\n            \"value\": web3.Web3.toWei(amount, \"ether\"),\n            \"chainId\": self._chain_id,\n            \"gasPrice\": gas_price or self.gas_price(),\n            \"gas\": gas,\n            \"nonce\": self._web3.eth.get_transaction_count(from_.address),\n        }\n    \n        signed_tx = self._web3.eth.account.sign_transaction(transaction, from_.key)\n>       tx = self._web3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\nutils/web3client.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7fc3bb6c9610>\ntransaction = HexBytes('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7fc3c13b0e50>, <function to_hexbytes at 0x7fc3bd7378b0>), <cyfunction identity at 0x7fc3c0639ee0>, <cyfunction identity at 0x7fc3c0639ee0>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7fc3c13b0e50>, <function to_hexbytes at 0x7fc3bd7378b0>)\nerror_formatters = <cyfunction identity at 0x7fc3c0639ee0>\nnull_result_formatters = <cyfunction identity at 0x7fc3c0639ee0>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7fc3bb6c91c0>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5',)\nerror_formatters = <cyfunction identity at 0x7fc3c0639ee0>\nnull_result_formatters = <cyfunction identity at 0x7fc3c0639ee0>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7fc3bb6c91c0>\nresponse = {'error': 'InvalidInstructionData', 'id': 6, 'jsonrpc': '2.0'}\nparams = ('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5',)\nerror_formatters = <cyfunction identity at 0x7fc3c0639ee0>\nnull_result_formatters = <cyfunction identity at 0x7fc3c0639ee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidInstructionData\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fc3bb3ca430>\namount = 1.1\n\n    @allure.step(\"test: send neon from one account to another\")\n    @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    def test_send_neon_from_one_account_to_another(self, amount: Union[int,\n                                                                       float]):\n        '''Send neon from one account to another'''\n        sender_account = self.create_account_with_balance(GREAT_AMOUNT)\n        recipient_account = self.create_account_with_balance(\n            FIRST_FAUCET_REQUEST_AMOUNT)\n    \n>       self.transfer_neon(sender_account,\n                           recipient_account,\n                           amount,\n                           gas=10_000,\n                           gas_price=1_000_000_000)\n\nintegration/tests/basic/test_transfers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helper_methods.py:75: in transfer_neon\n    self.process_transaction(sender_account, recipient_account, amount,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fc3bb3ca430>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>\namount = 1.1, gas = 10000, gas_price = 1000000000\nmessage = 'InvalidInstructionData'\n\n    @allure.step(\"processing transaction\")\n    def process_transaction(self,\n                            sender_account: Account,\n                            recipient_account: Account,\n                            amount: int,\n                            gas: int = GAS,\n                            gas_price: int = GAS_PRICE,\n                            message: str = \"\"):\n        try:\n            # with pytest.raises(ValueError) as error_info:\n            #     self.web3_client.send_neon(sender_account, recipient_account,\n            #                                amount, gas, gas_price)\n            #     print(error_info)\n            # assert message in str(error_info.value)\n    \n    \n            self.web3_client.send_neon(sender_account, recipient_account,\n                                        amount, gas, gas_price)\n    \n        except ValueError as error_info:\n            print(error_info)\n            assert \"The account balance is less than required\" in str(\n>               error_info.value)\nE           AttributeError: 'ValueError' object has no attribute 'value'\n\nintegration/tests/basic/helper_methods.py:63: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1645200848406,
      "stop" : 1645200848406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1645200848406,
      "stop" : 1645200848407,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1645200848407,
      "stop" : 1645200849436,
      "duration" : 1029
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1645200849436,
      "stop" : 1645200849437,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1645200849436,
      "stop" : 1645200849436,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1645200849438,
      "stop" : 1645200849438,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1645200852371,
      "stop" : 1645200854830,
      "duration" : 2459
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1645200852371,
        "stop" : 1645200852375,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xe43881e0B0f474C2b8418110F38778E5d09F26E6",
      "time" : {
        "start" : 1645200852375,
        "stop" : 1645200853381,
        "duration" : 1006
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 976992149.5608184 NEON 1359.07136316 SOL",
      "time" : {
        "start" : 1645200854830,
        "stop" : 1645200854830,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1645200858443,
      "stop" : 1645200858443,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1645200858443,
      "stop" : 1645200858443,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Send neon from one account to another",
    "status" : "broken",
    "statusMessage" : "AttributeError: 'ValueError' object has no attribute 'value'",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fc3bb3ca430>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>\namount = 1.1, gas = 10000, gas_price = 1000000000\nmessage = 'InvalidInstructionData'\n\n    @allure.step(\"processing transaction\")\n    def process_transaction(self,\n                            sender_account: Account,\n                            recipient_account: Account,\n                            amount: int,\n                            gas: int = GAS,\n                            gas_price: int = GAS_PRICE,\n                            message: str = \"\"):\n        try:\n            # with pytest.raises(ValueError) as error_info:\n            #     self.web3_client.send_neon(sender_account, recipient_account,\n            #                                amount, gas, gas_price)\n            #     print(error_info)\n            # assert message in str(error_info.value)\n    \n    \n>           self.web3_client.send_neon(sender_account, recipient_account,\n                                        amount, gas, gas_price)\n\nintegration/tests/basic/helper_methods.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7fc3bb6c9100>\nfrom_ = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>\nto = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>\namount = 1.1, gas = 10000, gas_price = 1000000000\n\n    def send_neon(\n        self,\n        from_: eth_account.signers.local.LocalAccount,\n        to: tp.Union[str, eth_account.signers.local.LocalAccount],\n        amount: tp.Union[int, float, Decimal],\n        gas: int = 100000000,\n        gas_price: tp.Optional[int] = None,\n    ) -> web3.types.TxReceipt:\n        to_addr = to if isinstance(to, str) else to.address\n        gas_price = gas_price or self.gas_price()\n        transaction = {\n            \"to\": to_addr,\n            \"value\": web3.Web3.toWei(amount, \"ether\"),\n            \"chainId\": self._chain_id,\n            \"gasPrice\": gas_price or self.gas_price(),\n            \"gas\": gas,\n            \"nonce\": self._web3.eth.get_transaction_count(from_.address),\n        }\n    \n        signed_tx = self._web3.eth.account.sign_transaction(transaction, from_.key)\n>       tx = self._web3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\nutils/web3client.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7fc3bb6c9610>\ntransaction = HexBytes('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7fc3c13b0e50>, <function to_hexbytes at 0x7fc3bd7378b0>), <cyfunction identity at 0x7fc3c0639ee0>, <cyfunction identity at 0x7fc3c0639ee0>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7fc3c13b0e50>, <function to_hexbytes at 0x7fc3bd7378b0>)\nerror_formatters = <cyfunction identity at 0x7fc3c0639ee0>\nnull_result_formatters = <cyfunction identity at 0x7fc3c0639ee0>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7fc3bb6c91c0>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5',)\nerror_formatters = <cyfunction identity at 0x7fc3c0639ee0>\nnull_result_formatters = <cyfunction identity at 0x7fc3c0639ee0>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7fc3bb6c91c0>\nresponse = {'error': 'InvalidInstructionData', 'id': 6, 'jsonrpc': '2.0'}\nparams = ('0xf86d80843b9aca0082271094695c10adcaec163228a99cb5418170f0d3663c93880f43fc2c04ee000080820101a0e26e95007c6f96725ceb6ef62fd224664fa9cb6bc1d1557e0b861ec0b803b094a017de58e06dcb08d7c7e937c1ef974c99d6805eeff24284e401b0d0ceb5c11ff5',)\nerror_formatters = <cyfunction identity at 0x7fc3c0639ee0>\nnull_result_formatters = <cyfunction identity at 0x7fc3c0639ee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidInstructionData\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fc3bb3ca430>\namount = 1.1\n\n    @allure.step(\"test: send neon from one account to another\")\n    @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    def test_send_neon_from_one_account_to_another(self, amount: Union[int,\n                                                                       float]):\n        '''Send neon from one account to another'''\n        sender_account = self.create_account_with_balance(GREAT_AMOUNT)\n        recipient_account = self.create_account_with_balance(\n            FIRST_FAUCET_REQUEST_AMOUNT)\n    \n>       self.transfer_neon(sender_account,\n                           recipient_account,\n                           amount,\n                           gas=10_000,\n                           gas_price=1_000_000_000)\n\nintegration/tests/basic/test_transfers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helper_methods.py:75: in transfer_neon\n    self.process_transaction(sender_account, recipient_account, amount,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fc3bb3ca430>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>\namount = 1.1, gas = 10000, gas_price = 1000000000\nmessage = 'InvalidInstructionData'\n\n    @allure.step(\"processing transaction\")\n    def process_transaction(self,\n                            sender_account: Account,\n                            recipient_account: Account,\n                            amount: int,\n                            gas: int = GAS,\n                            gas_price: int = GAS_PRICE,\n                            message: str = \"\"):\n        try:\n            # with pytest.raises(ValueError) as error_info:\n            #     self.web3_client.send_neon(sender_account, recipient_account,\n            #                                amount, gas, gas_price)\n            #     print(error_info)\n            # assert message in str(error_info.value)\n    \n    \n            self.web3_client.send_neon(sender_account, recipient_account,\n                                        amount, gas, gas_price)\n    \n        except ValueError as error_info:\n            print(error_info)\n            assert \"The account balance is less than required\" in str(\n>               error_info.value)\nE           AttributeError: 'ValueError' object has no attribute 'value'\n\nintegration/tests/basic/helper_methods.py:63: AttributeError",
    "steps" : [ {
      "name" : "test: send neon from one account to another",
      "time" : {
        "start" : 1645200858444,
        "stop" : 1645200860200,
        "duration" : 1756
      },
      "status" : "broken",
      "statusMessage" : "AttributeError: 'ValueError' object has no attribute 'value'\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/test_transfers.py\", line 22, in test_send_neon_from_one_account_to_another\n    self.transfer_neon(sender_account,\n  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helper_methods.py\", line 75, in transfer_neon\n    self.process_transaction(sender_account, recipient_account, amount,\n  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helper_methods.py\", line 63, in process_transaction\n    error_info.value)\n",
      "steps" : [ {
        "name" : "creating a new account with balance",
        "time" : {
          "start" : 1645200858444,
          "stop" : 1645200859113,
          "duration" : 669
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "creating a new account",
          "time" : {
            "start" : 1645200858444,
            "stop" : 1645200858447,
            "duration" : 3
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "requesting faucet for Neon",
          "time" : {
            "start" : 1645200858447,
            "stop" : 1645200859113,
            "duration" : 666
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "wallet",
            "value" : "'0xbA3DB246A5745F4F7B4732997EDA76e07ede2121'"
          }, {
            "name" : "amount",
            "value" : "1000"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "amount",
          "value" : "1000"
        } ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "creating a new account with balance",
        "time" : {
          "start" : 1645200859113,
          "stop" : 1645200859783,
          "duration" : 670
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "creating a new account",
          "time" : {
            "start" : 1645200859113,
            "stop" : 1645200859118,
            "duration" : 5
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "requesting faucet for Neon",
          "time" : {
            "start" : 1645200859118,
            "stop" : 1645200859783,
            "duration" : 665
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "wallet",
            "value" : "'0x695c10aDCaec163228a99cb5418170f0D3663c93'"
          }, {
            "name" : "amount",
            "value" : "5"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "amount",
          "value" : "5"
        } ],
        "stepsCount" : 2,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      }, {
        "name" : "transferring tokens",
        "time" : {
          "start" : 1645200859784,
          "stop" : 1645200860200,
          "duration" : 416
        },
        "status" : "broken",
        "statusMessage" : "AttributeError: 'ValueError' object has no attribute 'value'\n",
        "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helper_methods.py\", line 75, in transfer_neon\n    self.process_transaction(sender_account, recipient_account, amount,\n  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helper_methods.py\", line 63, in process_transaction\n    error_info.value)\n",
        "steps" : [ {
          "name" : "processing transaction",
          "time" : {
            "start" : 1645200859784,
            "stop" : 1645200860200,
            "duration" : 416
          },
          "status" : "broken",
          "statusMessage" : "AttributeError: 'ValueError' object has no attribute 'value'\n",
          "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helper_methods.py\", line 63, in process_transaction\n    error_info.value)\n",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "sender_account",
            "value" : "<eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>"
          }, {
            "name" : "recipient_account",
            "value" : "<eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>"
          }, {
            "name" : "amount",
            "value" : "1.1"
          }, {
            "name" : "gas",
            "value" : "10000"
          }, {
            "name" : "gas_price",
            "value" : "1000000000"
          }, {
            "name" : "message",
            "value" : "'InvalidInstructionData'"
          } ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : true,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "sender_account",
          "value" : "<eth_account.signers.local.LocalAccount object at 0x7fc3bb34fbe0>"
        }, {
          "name" : "recipient_account",
          "value" : "<eth_account.signers.local.LocalAccount object at 0x7fc3bb34f400>"
        }, {
          "name" : "amount",
          "value" : "1.1"
        }, {
          "name" : "gas",
          "value" : "10000"
        }, {
          "name" : "gas_price",
          "value" : "1000000000"
        } ],
        "stepsCount" : 1,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "amount",
        "value" : "1.1"
      } ],
      "stepsCount" : 8,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "b4827fb842f91b55",
      "name" : "stdout",
      "source" : "b4827fb842f91b55.txt",
      "type" : "text/plain",
      "size" : 23
    } ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1645200867789,
      "stop" : 1645200868602,
      "duration" : 813
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 976989094.5608184 NEON 1359.00532628 SOL",
      "time" : {
        "start" : 1645200868436,
        "stop" : 1645200868436,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1645200868602,
        "stop" : 1645200868602,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1645200868604,
      "stop" : 1645200868605,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: transfer tests"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestTransfer"
  }, {
    "name" : "host",
    "value" : "fv-az269-832"
  }, {
    "name" : "thread",
    "value" : "1682-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "amount",
    "value" : "1.1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "c76d979ab2f5efb7",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254-Basic-integration-tests-for-transactions-and-accounts/114//#testresult/c76d979ab2f5efb7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Sender: expected balance = 998.9, actual balance = 1000",
        "time" : {
          "start" : 1645200710920,
          "stop" : 1645200712650,
          "duration" : 1730
        }
      }, {
        "uid" : "3903ca39af13577d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254-Basic-integration-tests-for-transactions-and-accounts/113//#testresult/3903ca39af13577d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Sender: expected balance = 998.9, actual balance = 1000",
        "time" : {
          "start" : 1645200517417,
          "stop" : 1645200519174,
          "duration" : 1757
        }
      }, {
        "uid" : "b3ecb53885480ec8",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254-Basic-integration-tests-for-transactions-and-accounts/112//#testresult/b3ecb53885480ec8",
        "status" : "failed",
        "statusDetails" : "AssertionError: Sender: expected balance = 998.9, actual balance = 1000",
        "time" : {
          "start" : 1645199886746,
          "stop" : 1645199888344,
          "duration" : 1598
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7eb429cf595fe1ca.json",
  "parameterValues" : [ "1.1" ]
}