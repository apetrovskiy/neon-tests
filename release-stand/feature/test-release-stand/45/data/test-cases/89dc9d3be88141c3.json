{
  "uid" : "89dc9d3be88141c3",
  "name" : "test_withdraw_neon_existing_ata",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_withdraw_neon_existing_ata",
  "historyId" : "76780623b3b97679b79a7a9f2bde0b5b",
  "time" : {
    "start" : 1647884072728,
    "stop" : 1647884097705,
    "duration" : 24977
  },
  "status" : "broken",
  "statusMessage" : "ValueError: InvalidArgument",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f71cac347c0>\npytestconfig = <_pytest.config.Config object at 0x7f71d0fe5340>\n\n    def test_withdraw_neon_existing_ata(self, pytestconfig):\n        neon_mint = PublicKey(pytestconfig.environment.spl_neon_mint)\n        sol_user = SolanaAccount()\n        self.sol_client.request_airdrop(sol_user.public_key, 5 * LAMPORT_PER_SOL)\n    \n        for _ in range(6):\n            if self.sol_client.get_balance(sol_user.public_key) != 0:\n                break\n            time.sleep(10)\n    \n        trx = Transaction()\n        trx.add(create_associated_token_account(sol_user.public_key, sol_user.public_key, neon_mint))\n    \n        opts = TxOpts(skip_preflight=True, skip_confirmation=False)\n        self.sol_client.send_transaction(trx, sol_user, opts=opts)\n    \n        dest_token_acc = get_associated_token_address(sol_user.public_key, neon_mint)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_interface = helpers.get_contract_interface(\"NeonToken.sol\", \"0.8.10\")\n        contract = self.web3_client.eth.contract(\n            address=pytestconfig.environment.neon_erc20wrapper_address, abi=contract_interface[\"abi\"]\n        )\n    \n        user_neon_balance_before = self.web3_client.get_balance(self.acc)\n        move_amount = self.web3_client._web3.toWei(5, \"ether\")\n    \n        instruction_tx = contract.functions.withdraw(bytes(sol_user.public_key)).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"value\": move_amount,\n            }\n        )\n>       receipt = self.web3_client.send_transaction(self.acc, instruction_tx)\n\nintegration/tests/economy/test_economics.py:258: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/web3client.py:168: in send_transaction\n    signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: in send_raw_transaction\n    return self._send_raw_transaction(transaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n    result = w3.manager.request_blocking(method_str,\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: in request_blocking\n    return self.formatted_response(response,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f71cab84520>\nresponse = {'error': 'InvalidArgument', 'id': 262, 'jsonrpc': '2.0'}\nparams = ('0xf89204856266e0bf008318182094053e3d1b12726f648b2e45ceabdf9078b742576d884563918244f40000a48e19899ef2018433f17740b68a...251e09098f1da1cd2311afc4f4d6a592f3e533a0a2f032a9ce1b9f50f2ba8dc1d767fdefcb2880655fda6978ec82872d9d651ec116a822eafb5a',)\nerror_formatters = <cyfunction identity at 0x7f71d03a7ee0>\nnull_result_formatters = <cyfunction identity at 0x7f71d03a7ee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidArgument\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647883884554,
      "stop" : 1647883884554,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1647883884555,
      "stop" : 1647883884556,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647883884557,
      "stop" : 1647883885668,
      "duration" : 1111
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647883885668,
      "stop" : 1647883885668,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647883885669,
      "stop" : 1647883885669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647883885669,
      "stop" : 1647883885669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647883885669,
      "stop" : 1647883886425,
      "duration" : 756
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647883886426,
      "stop" : 1647883886490,
      "duration" : 64
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 87.936867$",
      "time" : {
        "start" : 1647883886490,
        "stop" : 1647883886490,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647883886491,
      "stop" : 1647883895609,
      "duration" : 9118
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647883886491,
        "stop" : 1647883886504,
        "duration" : 13
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x70498175330e42dc8E9C110859880A5E5085d686",
      "time" : {
        "start" : 1647883886504,
        "stop" : 1647883887722,
        "duration" : 1218
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000922153436 NEON 72841.16802248 SOL",
      "time" : {
        "start" : 1647883895609,
        "stop" : 1647883895609,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647884072727,
      "stop" : 1647884072727,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647884072727,
      "stop" : 1647884072727,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647884072727,
      "stop" : 1647884072727,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: InvalidArgument",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f71cac347c0>\npytestconfig = <_pytest.config.Config object at 0x7f71d0fe5340>\n\n    def test_withdraw_neon_existing_ata(self, pytestconfig):\n        neon_mint = PublicKey(pytestconfig.environment.spl_neon_mint)\n        sol_user = SolanaAccount()\n        self.sol_client.request_airdrop(sol_user.public_key, 5 * LAMPORT_PER_SOL)\n    \n        for _ in range(6):\n            if self.sol_client.get_balance(sol_user.public_key) != 0:\n                break\n            time.sleep(10)\n    \n        trx = Transaction()\n        trx.add(create_associated_token_account(sol_user.public_key, sol_user.public_key, neon_mint))\n    \n        opts = TxOpts(skip_preflight=True, skip_confirmation=False)\n        self.sol_client.send_transaction(trx, sol_user, opts=opts)\n    \n        dest_token_acc = get_associated_token_address(sol_user.public_key, neon_mint)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_interface = helpers.get_contract_interface(\"NeonToken.sol\", \"0.8.10\")\n        contract = self.web3_client.eth.contract(\n            address=pytestconfig.environment.neon_erc20wrapper_address, abi=contract_interface[\"abi\"]\n        )\n    \n        user_neon_balance_before = self.web3_client.get_balance(self.acc)\n        move_amount = self.web3_client._web3.toWei(5, \"ether\")\n    \n        instruction_tx = contract.functions.withdraw(bytes(sol_user.public_key)).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"value\": move_amount,\n            }\n        )\n>       receipt = self.web3_client.send_transaction(self.acc, instruction_tx)\n\nintegration/tests/economy/test_economics.py:258: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/web3client.py:168: in send_transaction\n    signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: in send_raw_transaction\n    return self._send_raw_transaction(transaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n    result = w3.manager.request_blocking(method_str,\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: in request_blocking\n    return self.formatted_response(response,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f71cab84520>\nresponse = {'error': 'InvalidArgument', 'id': 262, 'jsonrpc': '2.0'}\nparams = ('0xf89204856266e0bf008318182094053e3d1b12726f648b2e45ceabdf9078b742576d884563918244f40000a48e19899ef2018433f17740b68a...251e09098f1da1cd2311afc4f4d6a592f3e533a0a2f032a9ce1b9f50f2ba8dc1d767fdefcb2880655fda6978ec82872d9d651ec116a822eafb5a',)\nerror_formatters = <cyfunction identity at 0x7f71d03a7ee0>\nnull_result_formatters = <cyfunction identity at 0x7f71d03a7ee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidArgument\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "af03541bf1720235",
      "name" : "stdout",
      "source" : "af03541bf1720235.txt",
      "type" : "text/plain",
      "size" : 71
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647884554874,
      "stop" : 1647884562982,
      "duration" : 8108
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000923123638 NEON 72838.93761452 SOL",
      "time" : {
        "start" : 1647884562633,
        "stop" : 1647884562633,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 595.361218266128 NEON",
      "time" : {
        "start" : 1647884562982,
        "stop" : 1647884562982,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647884562988,
      "stop" : 1647884562988,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az451-996"
  }, {
    "name" : "thread",
    "value" : "1773-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "5a1493791d344a44",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/test-release-stand/42//#testresult/5a1493791d344a44",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647882942617,
          "stop" : 1647882963059,
          "duration" : 20442
        }
      }, {
        "uid" : "f0a2d3b4c35f154c",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/test-release-stand/39//#testresult/f0a2d3b4c35f154c",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647881228904,
          "stop" : 1647881249431,
          "duration" : 20527
        }
      }, {
        "uid" : "d45353a8e0c50e35",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/test-release-stand/36//#testresult/d45353a8e0c50e35",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647880978702,
          "stop" : 1647881003645,
          "duration" : 24943
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "89dc9d3be88141c3.json",
  "parameterValues" : [ ]
}