{
  "uid" : "b857ea24c44aaaa1",
  "name" : "test_send_neon_from_one_account_to_another[1]",
  "fullName" : "integration.tests.basic.test_transfers.TestTransfer#test_send_neon_from_one_account_to_another",
  "historyId" : "e0fb2960146feb86d2510769aeee9644",
  "time" : {
    "start" : 1647627416224,
    "stop" : 1647627419034,
    "duration" : 2810
  },
  "description" : "Send neon from one account to another",
  "descriptionHtml" : "<p>Send neon from one account to another</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: expected balance = 3.313, actual balance = 955.799",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fadd7d1b9d0>\namount = 1, prepare_accounts = None\n\n    @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    def test_send_neon_from_one_account_to_another(self, amount: Union[int,\n                                                                       float],\n                                                   prepare_accounts):\n        \"\"\"Send neon from one account to another\"\"\"\n    \n        tx_receipt = self.transfer_neon(self.sender_account,\n                                        self.recipient_account, amount)\n    \n>       self.assert_balance(\n            self.sender_account.address,\n            InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount -\n            self.calculate_trx_gas(tx_receipt=tx_receipt))\n\nintegration/tests/basic/test_transfers.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:145: in assert_balance\n    self.check_balance(expected_amount, balance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fadd7d1b9d0>\nexpected = 3.3129999999999997, actual = Decimal('955.799331233616')\n\n    def check_balance(self, expected: float, actual: Decimal):\n        '''Compares the balance with expectation'''\n        expected_dec = round(expected, InputData.ROUND_DIGITS.value)\n        actual_dec = float(round(actual, InputData.ROUND_DIGITS.value))\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 3.313, actual balance = 955.799\n\nintegration/tests/basic/helpers/basic.py:140: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647627394584,
      "stop" : 1647627394585,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1647627394585,
      "stop" : 1647627394586,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647627394586,
      "stop" : 1647627395424,
      "duration" : 838
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647627395424,
      "stop" : 1647627395424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647627395424,
      "stop" : 1647627395424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647627395424,
      "stop" : 1647627395424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "jsonrpc_requester",
    "time" : {
      "start" : 1647627395424,
      "stop" : 1647627395424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_json_rpc_requester",
    "time" : {
      "start" : 1647627416220,
      "stop" : 1647627416220,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_accounts",
    "time" : {
      "start" : 1647627416220,
      "stop" : 1647627416224,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647627416220,
      "stop" : 1647627416220,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Send neon from one account to another",
    "status" : "failed",
    "statusMessage" : "AssertionError: expected balance = 3.313, actual balance = 955.799",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fadd7d1b9d0>\namount = 1, prepare_accounts = None\n\n    @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    def test_send_neon_from_one_account_to_another(self, amount: Union[int,\n                                                                       float],\n                                                   prepare_accounts):\n        \"\"\"Send neon from one account to another\"\"\"\n    \n        tx_receipt = self.transfer_neon(self.sender_account,\n                                        self.recipient_account, amount)\n    \n>       self.assert_balance(\n            self.sender_account.address,\n            InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount -\n            self.calculate_trx_gas(tx_receipt=tx_receipt))\n\nintegration/tests/basic/test_transfers.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:145: in assert_balance\n    self.check_balance(expected_amount, balance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestTransfer object at 0x7fadd7d1b9d0>\nexpected = 3.3129999999999997, actual = Decimal('955.799331233616')\n\n    def check_balance(self, expected: float, actual: Decimal):\n        '''Compares the balance with expectation'''\n        expected_dec = round(expected, InputData.ROUND_DIGITS.value)\n        actual_dec = float(round(actual, InputData.ROUND_DIGITS.value))\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 3.313, actual balance = 955.799\n\nintegration/tests/basic/helpers/basic.py:140: AssertionError",
    "steps" : [ {
      "name" : "Sending 1 from 0x10bA76E88cd03842eb45875e66a0CfD995Ab4D4A to 0x3DcB259dA9D79efc89EAFd04a98c533ecAf5cCa6",
      "time" : {
        "start" : 1647627416224,
        "stop" : 1647627418933,
        "duration" : 2709
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "calculating gas",
      "time" : {
        "start" : 1647627418933,
        "stop" : 1647627418972,
        "duration" : 39
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "tx_receipt",
        "value" : "AttributeDict({'transactionHash': HexBytes('0x83a64c18b276998565ad1d2cbd24c7639848c74e8404c54f96979247560133a0'), 'transactionIndex': 0, 'blockHash': HexBytes('0x4896733724102545713f65312a30d2cca9c9aa880659cf1f5bf1870c96221ec0'), 'blockNumber': 121892834, 'from': '0x10bA76E88cd03842eb45875e66a0CfD995Ab4D4A', 'to': '0x3DcB259dA9D79efc89EAFd04a98c533ecAf5cCa6', 'gasUsed': 1579040, 'cumulativeGasUsed': 1579040, 'contractAddress': None, 'logs': [], 'status': 1, 'logsBloom': HexBytes('0x})"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "9d8325696a4b9dc5",
      "name" : "stdout",
      "source" : "9d8325696a4b9dc5.txt",
      "type" : "text/plain",
      "size" : 122
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_accounts::0",
    "time" : {
      "start" : 1647627419080,
      "stop" : 1647627419080,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647627432616,
      "stop" : 1647627432617,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: transfer tests"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestTransfer"
  }, {
    "name" : "host",
    "value" : "fv-az129-271"
  }, {
    "name" : "thread",
    "value" : "1742-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "amount",
    "value" : "1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "9fa2180d1faffb2d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254t/641//#testresult/9fa2180d1faffb2d",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1647624115490,
          "stop" : 1647624115490,
          "duration" : 0
        }
      }, {
        "uid" : "1aee3cab3aa3a052",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254t/635//#testresult/1aee3cab3aa3a052",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1647623113962,
          "stop" : 1647623113962,
          "duration" : 0
        }
      }, {
        "uid" : "593062de921d5106",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254t/632//#testresult/593062de921d5106",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1647622865354,
          "stop" : 1647622865354,
          "duration" : 0
        }
      }, {
        "uid" : "9c306d548d5d3e64",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254t/629//#testresult/9c306d548d5d3e64",
        "status" : "broken",
        "statusDetails" : "ValueError: {'code': -32000, 'message': 'connection already closed'}",
        "time" : {
          "start" : 1647622827916,
          "stop" : 1647622828591,
          "duration" : 675
        }
      }, {
        "uid" : "e12c36cad7f06233",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/release-stand/feature/254t/624//#testresult/e12c36cad7f06233",
        "status" : "passed",
        "time" : {
          "start" : 1647622191739,
          "stop" : 1647622193383,
          "duration" : 1644
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b857ea24c44aaaa1.json",
  "parameterValues" : [ "1" ]
}