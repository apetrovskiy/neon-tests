{
  "uid" : "8bc405d8b5d24ac3",
  "name" : "test_generate_bad_sign[1-18446744073709551616-insufficient funds for transfer]",
  "fullName" : "integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation#test_generate_bad_sign",
  "historyId" : "91424693a7cf6b27f5c96be4cfd2ed62",
  "time" : {
    "start" : 1650116969268,
    "stop" : 1650116969484,
    "duration" : 216
  },
  "description" : "Generate bad sign (when v, r, s over allowed size)",
  "descriptionHtml" : "<p>Generate bad sign (when v, r, s over allowed size)</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Actual result JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0')\nassert 'insufficient funds for transfer' in {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}\n +  where {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'} = JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0').error",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f39f4fafeb0>\ngas_limit = 1, gas_price = 18446744073709551616\nexpected_message = 'insufficient funds for transfer', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\"\"\"\n    \n        transaction = self.get_transaction_data(gas_limit=gas_limit,gas_price=gas_price)\n    \n        signed_tx = self.web3_client.eth.account.sign_transaction(\n            transaction, self.sender_account.key)\n    \n        #\n        print(\"=============================\")\n        print(signed_tx)\n        #\n    \n    \n    \n        params = [signed_tx.rawTransaction.hex()]\n    \n        model = RpcRequestFactory.get_send_raw_trx(params=params)\n    \n        response = self.jsonrpc_requester.request_json_rpc(model)\n        actual_result = self.jsonrpc_requester.deserialize_response(response)\n    \n        assert actual_result.id == model.id, AssertMessage.WRONG_ID.value\n        # assert self.assert_is_successful_response(\n        #     actual_result), AssertMessage.WRONG_TYPE.value\n>       assert expected_message in actual_result.error, f\"Actual result {actual_result}\"\nE       AssertionError: Actual result JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0')\nE       assert 'insufficient funds for transfer' in {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}\nE        +  where {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'} = JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0').error\n\nintegration/tests/basic/test_transfers.py:407: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650116743864,
      "stop" : 1650116743864,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1650116743865,
      "stop" : 1650116743866,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650116743867,
      "stop" : 1650116744455,
      "duration" : 588
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650116744455,
      "stop" : 1650116744456,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "jsonrpc_requester",
    "time" : {
      "start" : 1650116744456,
      "stop" : 1650116744456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650116744456,
      "stop" : 1650116744456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650116744456,
      "stop" : 1650116744456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650116945254,
      "stop" : 1650116950473,
      "duration" : 5219
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650116945254,
        "stop" : 1650116945259,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xCdef241330404432b53927C0245CAD9978c05E23",
      "time" : {
        "start" : 1650116945259,
        "stop" : 1650116946071,
        "duration" : 812
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.004627043242686767796768 NEON 67013.82834652 SOL",
      "time" : {
        "start" : 1650116950473,
        "stop" : 1650116950473,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_accounts",
    "time" : {
      "start" : 1650116968026,
      "stop" : 1650116969267,
      "duration" : 1241
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650116968026,
      "stop" : 1650116968026,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650116968026,
      "stop" : 1650116968026,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_json_rpc_requester",
    "time" : {
      "start" : 1650116968026,
      "stop" : 1650116968026,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Generate bad sign (when v, r, s over allowed size)",
    "status" : "failed",
    "statusMessage" : "AssertionError: Actual result JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0')\nassert 'insufficient funds for transfer' in {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}\n +  where {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'} = JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0').error",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f39f4fafeb0>\ngas_limit = 1, gas_price = 18446744073709551616\nexpected_message = 'insufficient funds for transfer', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\"\"\"\n    \n        transaction = self.get_transaction_data(gas_limit=gas_limit,gas_price=gas_price)\n    \n        signed_tx = self.web3_client.eth.account.sign_transaction(\n            transaction, self.sender_account.key)\n    \n        #\n        print(\"=============================\")\n        print(signed_tx)\n        #\n    \n    \n    \n        params = [signed_tx.rawTransaction.hex()]\n    \n        model = RpcRequestFactory.get_send_raw_trx(params=params)\n    \n        response = self.jsonrpc_requester.request_json_rpc(model)\n        actual_result = self.jsonrpc_requester.deserialize_response(response)\n    \n        assert actual_result.id == model.id, AssertMessage.WRONG_ID.value\n        # assert self.assert_is_successful_response(\n        #     actual_result), AssertMessage.WRONG_TYPE.value\n>       assert expected_message in actual_result.error, f\"Actual result {actual_result}\"\nE       AssertionError: Actual result JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0')\nE       assert 'insufficient funds for transfer' in {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}\nE        +  where {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'} = JsonRpcErrorResponse(id=17, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0').error\n\nintegration/tests/basic/test_transfers.py:407: AssertionError",
    "steps" : [ {
      "name" : "Request: JsonRpcRequest(id=17, method='eth_sendRawTransaction', params=['0xf86f80890100000000000000000194c705c79f1c7a0092acf05aef70f175866018cf6e87470de4df82000080820101a05a0151697999900f0695dab17698ae6d431820724a7805e12d1078a696ff9193a04e3f7ae8993cc64b4456f31ad5710c7dd2d8ab6c303e3a6f0324343f21f4b7f8'], jsonrpc='2.0')",
      "time" : {
        "start" : 1650116969379,
        "stop" : 1650116969483,
        "duration" : 104
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Response: {'jsonrpc': '2.0', 'id': 17, 'error': {'code': -32000, 'message': 'insufficient funds for transfer: address 0xb59439ab9059080fae2ab329ac04fa7ee232042a have 5000000000000000000 want 18466744073709551616'}}",
      "time" : {
        "start" : 1650116969483,
        "stop" : 1650116969483,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "3217605fc6be0891",
      "name" : "stdout",
      "source" : "3217605fc6be0891.txt",
      "type" : "text/plain",
      "size" : 559
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_accounts::0",
    "time" : {
      "start" : 1650116969493,
      "stop" : 1650116969494,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650116970966,
      "stop" : 1650116975378,
      "duration" : 4412
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.004627043242686767796768 NEON 67013.79080956 SOL",
      "time" : {
        "start" : 1650116975278,
        "stop" : 1650116975278,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650116975378,
        "stop" : 1650116975378,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650116975385,
      "stop" : 1650116975386,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: Json-RPC call tests - transactions validation"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestRpcCallsTransactionsValidation"
  }, {
    "name" : "host",
    "value" : "fv-az193-127"
  }, {
    "name" : "thread",
    "value" : "1863-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_message",
    "value" : "'insufficient funds for transfer'"
  }, {
    "name" : "gas_limit",
    "value" : "1"
  }, {
    "name" : "gas_price",
    "value" : "18446744073709551616"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "6ebee3ba884fd8df",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/885//#testresult/6ebee3ba884fd8df",
        "status" : "failed",
        "statusDetails" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f5053548190>>(JsonRpcErrorResponse(id=62, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0xe7b3ab1b9532162cb80e17476611e6b7925792d0 have 5000000000000000000 want 18466744073709551616'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f5053548190>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f5053548190>.assert_is_successful_response",
        "time" : {
          "start" : 1650114585577,
          "stop" : 1650114585938,
          "duration" : 361
        }
      }, {
        "uid" : "687dd63571196bb8",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/883//#testresult/687dd63571196bb8",
        "status" : "failed",
        "statusDetails" : "AssertionError: The response type is error response\nassert False\n +  where False = <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f2bad509c10>>(JsonRpcErrorResponse(id=36, error={'code': -32000, 'message': 'insufficient funds for transfer: address 0x83f282726d9eb18a112dbfa1600172127690924a have 5000000000000000000 want 387381645547900583936000'}, jsonrpc='2.0'))\n +    where <bound method BasicTests.assert_is_successful_response of <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f2bad509c10>> = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f2bad509c10>.assert_is_successful_response",
        "time" : {
          "start" : 1650048222860,
          "stop" : 1650048223793,
          "duration" : 933
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8bc405d8b5d24ac3.json",
  "parameterValues" : [ "'insufficient funds for transfer'", "1", "18446744073709551616" ]
}