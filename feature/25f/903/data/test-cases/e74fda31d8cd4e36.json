{
  "uid" : "e74fda31d8cd4e36",
  "name" : "test_generate_bad_sign[0-18446744073709551616-gas limit reached]",
  "fullName" : "integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation#test_generate_bad_sign",
  "historyId" : "7448c5c029463b42d38c08147bafb812",
  "time" : {
    "start" : 1650130203902,
    "stop" : 1650130204588,
    "duration" : 686
  },
  "description" : "Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        ",
  "descriptionHtml" : "<p>Generate bad sign (when v, r, s over allowed size)<br />\nToo low gas_limit<br />\nToo high gas_limit &gt; u64::max<br />\nToo high gas_limit &gt; u64::max<br />\nToo high gas_price &gt; u64::max<br />\nToo high gas_limit * gas_price &gt; u64::max</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f6fa7070f10>\ngas_limit = 0, gas_price = 18446744073709551616\nexpected_message = 'gas limit reached', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        \"\"\"\n        # transaction = self.get_transaction_data(\n        #     gas_limit=gas_limit, gas_price=gas_price)\n    \n        # signed_tx = self.web3_client.eth.account.sign_transaction(\n        #     transaction, self.sender_account.key)\n    \n        # params = [signed_tx.rawTransaction.hex()]\n        # model = RpcRequestFactory.get_send_raw_trx(params=params)\n        # response = self.jsonrpc_requester.request_json_rpc(model)\n        # actual_result = self.jsonrpc_requester.deserialize_response(response)\n    \n        # assert actual_result.id == model.id, AssertMessage.WRONG_ID.value\n        # assert expected_message in actual_result.error[\n        #     'message'], f\"Actual result {actual_result}\"\n    \n        amount = InputData.DEFAULT_TRANSFER_AMOUNT.value\n    \n>       self.process_transaction_with_failure(\n            self.sender_account,\n            self.recipient_account,\n            amount,\n            gas=gas_limit,\n            gas_price=gas_price,\n            error_message=expected_message)\n\nintegration/tests/basic/test_transfers.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f6fa7070f10>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7f6fa70ba430>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7f6fa70baa60>\namount = 0.01, gas = 0, gas_price = 18446744073709551616\nerror_message = 'gas limit reached'\n\n    def process_transaction_with_failure(\n            self,\n            sender_account: Account,\n            recipient_account: Union[Account, AccountData],\n            amount: int,\n            gas: Optional[int] = 0,\n            gas_price: Optional[int] = None,\n            error_message: str = \"\") -> Union[web3.types.TxReceipt, None]:\n        '''Processes transaction, expects a failure'''\n    \n        tx: Union[web3.types.TxReceipt, None] = None\n        with allure.step(\n                f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"\n        ):\n            with pytest.raises(Exception) as error_info:\n                tx = self.web3_client.send_neon(sender_account,\n                                                recipient_account, amount, gas,\n                                                gas_price)\n    \n            if error_info != None:\n    \n                if error_message:\n>                   assert error_message in str(error_info)\nE                   AssertionError\n\nintegration/tests/basic/helpers/basic.py:109: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650129960062,
      "stop" : 1650129960062,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1650129960062,
      "stop" : 1650129960063,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650129960063,
      "stop" : 1650129961049,
      "duration" : 986
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "jsonrpc_requester",
    "time" : {
      "start" : 1650129961049,
      "stop" : 1650129961049,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650129961049,
      "stop" : 1650129961049,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650129961050,
      "stop" : 1650129961050,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650129961050,
      "stop" : 1650129961050,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650130191540,
      "stop" : 1650130198276,
      "duration" : 6736
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650130191540,
        "stop" : 1650130191544,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xb21b1f644f49de02717Df15DBd3BBf7c29262538",
      "time" : {
        "start" : 1650130191544,
        "stop" : 1650130192442,
        "duration" : 898
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.004627043615557253796768 NEON 67011.77043296 SOL",
      "time" : {
        "start" : 1650130198276,
        "stop" : 1650130198276,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_json_rpc_requester",
    "time" : {
      "start" : 1650130202603,
      "stop" : 1650130202603,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650130202603,
      "stop" : 1650130202603,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650130202603,
      "stop" : 1650130202603,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_accounts",
    "time" : {
      "start" : 1650130202604,
      "stop" : 1650130203902,
      "duration" : 1298
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f6fa7070f10>\ngas_limit = 0, gas_price = 18446744073709551616\nexpected_message = 'gas limit reached', prepare_accounts = None\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message, prepare_accounts):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        \"\"\"\n        # transaction = self.get_transaction_data(\n        #     gas_limit=gas_limit, gas_price=gas_price)\n    \n        # signed_tx = self.web3_client.eth.account.sign_transaction(\n        #     transaction, self.sender_account.key)\n    \n        # params = [signed_tx.rawTransaction.hex()]\n        # model = RpcRequestFactory.get_send_raw_trx(params=params)\n        # response = self.jsonrpc_requester.request_json_rpc(model)\n        # actual_result = self.jsonrpc_requester.deserialize_response(response)\n    \n        # assert actual_result.id == model.id, AssertMessage.WRONG_ID.value\n        # assert expected_message in actual_result.error[\n        #     'message'], f\"Actual result {actual_result}\"\n    \n        amount = InputData.DEFAULT_TRANSFER_AMOUNT.value\n    \n>       self.process_transaction_with_failure(\n            self.sender_account,\n            self.recipient_account,\n            amount,\n            gas=gas_limit,\n            gas_price=gas_price,\n            error_message=expected_message)\n\nintegration/tests/basic/test_transfers.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestRpcCallsTransactionsValidation object at 0x7f6fa7070f10>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7f6fa70ba430>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7f6fa70baa60>\namount = 0.01, gas = 0, gas_price = 18446744073709551616\nerror_message = 'gas limit reached'\n\n    def process_transaction_with_failure(\n            self,\n            sender_account: Account,\n            recipient_account: Union[Account, AccountData],\n            amount: int,\n            gas: Optional[int] = 0,\n            gas_price: Optional[int] = None,\n            error_message: str = \"\") -> Union[web3.types.TxReceipt, None]:\n        '''Processes transaction, expects a failure'''\n    \n        tx: Union[web3.types.TxReceipt, None] = None\n        with allure.step(\n                f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"\n        ):\n            with pytest.raises(Exception) as error_info:\n                tx = self.web3_client.send_neon(sender_account,\n                                                recipient_account, amount, gas,\n                                                gas_price)\n    \n            if error_info != None:\n    \n                if error_message:\n>                   assert error_message in str(error_info)\nE                   AssertionError\n\nintegration/tests/basic/helpers/basic.py:109: AssertionError",
    "steps" : [ {
      "name" : "Sending 0.01 from 0x8F4A79d0AF4216cB8972F76269f1B85102127677 to 0x79cA88cac29e4D63416c25b60cf22Af28cA94489",
      "time" : {
        "start" : 1650130203902,
        "stop" : 1650130204588,
        "duration" : 686
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helpers/basic.py\", line 109, in process_transaction_with_failure\n    assert error_message in str(error_info)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_accounts::0",
    "time" : {
      "start" : 1650130204668,
      "stop" : 1650130204668,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650130208369,
      "stop" : 1650130214222,
      "duration" : 5853
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.004627043615557253796768 NEON 67011.75479256 SOL",
      "time" : {
        "start" : 1650130214088,
        "stop" : 1650130214088,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650130214222,
        "stop" : 1650130214222,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650130214227,
      "stop" : 1650130214227,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: Json-RPC call tests - transactions validation"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestRpcCallsTransactionsValidation"
  }, {
    "name" : "host",
    "value" : "fv-az173-103"
  }, {
    "name" : "thread",
    "value" : "1822-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_message",
    "value" : "'gas limit reached'"
  }, {
    "name" : "gas_limit",
    "value" : "0"
  }, {
    "name" : "gas_price",
    "value" : "18446744073709551616"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 4,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "389327c514a2a80d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/901//#testresult/389327c514a2a80d",
        "status" : "passed",
        "time" : {
          "start" : 1650128945464,
          "stop" : 1650128946193,
          "duration" : 729
        }
      }, {
        "uid" : "7f4ee7f5fafa4ef6",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/899//#testresult/7f4ee7f5fafa4ef6",
        "status" : "passed",
        "time" : {
          "start" : 1650127365940,
          "stop" : 1650127366510,
          "duration" : 570
        }
      }, {
        "uid" : "9d9993ab59913e74",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/897//#testresult/9d9993ab59913e74",
        "status" : "passed",
        "time" : {
          "start" : 1650126032591,
          "stop" : 1650126033310,
          "duration" : 719
        }
      }, {
        "uid" : "802a6548d71a3bcd",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/895//#testresult/802a6548d71a3bcd",
        "status" : "passed",
        "time" : {
          "start" : 1650125002394,
          "stop" : 1650125002750,
          "duration" : 356
        }
      }, {
        "uid" : "2b8dcc3fe31cb15d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/893//#testresult/2b8dcc3fe31cb15d",
        "status" : "failed",
        "statusDetails" : "AssertionError: expected balance = 5.02, actual balance = 5.0",
        "time" : {
          "start" : 1650123848662,
          "stop" : 1650123849213,
          "duration" : 551
        }
      }, {
        "uid" : "5a1d8f1e27365e22",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25f/891//#testresult/5a1d8f1e27365e22",
        "status" : "broken",
        "statusDetails" : "AttributeError: 'dict' object has no attribute 'message'",
        "time" : {
          "start" : 1650122929481,
          "stop" : 1650122929860,
          "duration" : 379
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e74fda31d8cd4e36.json",
  "parameterValues" : [ "'gas limit reached'", "0", "18446744073709551616" ]
}