{
  "uid" : "7a5c617155fc583a",
  "name" : "test_tx_interact_more_1kb_less_neon",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_tx_interact_more_1kb_less_neon",
  "historyId" : "7ed5204cc689e25a60d93bc45ee24cf5",
  "time" : {
    "start" : 1652256936898,
    "stop" : 1652256944818,
    "duration" : 7920
  },
  "description" : "Send to contract a big text (tx more than 1 kb) when less neon",
  "descriptionHtml" : "<p>Send to contract a big text (tx more than 1 kb) when less neon</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xcb57b4cff00de52a6e18b12ecc973ad9e6ca88b9 have 1000000000000000 want 7885515847979520'}\".",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f9840013cd0>\n\n    def test_tx_interact_more_1kb_less_neon(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb) when less neon\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"Counter\", \"0.8.10\")\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_instruction = self.operator.get_solana_balance()\n        neon_balance_before_instruction = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           instruction_receipt = self.web3_client.send_transaction(acc2, instruction_tx)\n\nintegration/tests/economy/test_economics.py:681: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7f984003cfd0>\naccount = <eth_account.signers.local.LocalAccount object at 0x7f983eb50670>\ntransaction = {'chainId': 111, 'data': '0x08650c7a0000000000000000000000000000000000000000000000000000000000000020000000000000000000...6f000000000000000000000000000000000000000000', 'from': '0xcB57B4Cff00DE52A6e18b12ecC973ad9e6ca88b9', 'gas': 25640, ...}\ngas = None\n\n    def send_transaction(\n        self, account: eth_account.signers.local.LocalAccount, transaction, gas: tp.Optional[int] = None\n    ):\n        if \"gasPrice\" not in transaction:\n            transaction[\"gasPrice\"] = (self.gas_price(),)\n    \n        if \"gas\" not in transaction:\n            transaction[\"gas\"] = self._web3.eth.estimate_gas(transaction)\n    \n        instruction_tx = self._web3.eth.account.sign_transaction(transaction, account.key)\n>       signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n\nutils/web3client.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7f984003cd00>\ntransaction = HexBytes('0xf9056c8085479b41354082642894c0374eee1d489ddfb8309b875a628f41c486d2a380b9050408650c7a0000000000000000000000...d6f8ddad9297319d9f2599a7097b86b016e95ca13fdba01785ca07093e2bd842cfad58b7c9a92739e8e74560e829228c43dcfb9c6fafd9b12c6fe')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf9056c8085479b41354082642894c0374eee1d489ddfb8309b875a628f41c486d2a380b9050408650c7a000000000000000000000...f8ddad9297319d9f2599a7097b86b016e95ca13fdba01785ca07093e2bd842cfad58b7c9a92739e8e74560e829228c43dcfb9c6fafd9b12c6fe'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf9056c8085479b41354082642894c0374eee1d489ddfb8309b875a628f41c486d2a380b9050408650c7a000000000000000000000000000000...6f8ddad9297319d9f2599a7097b86b016e95ca13fdba01785ca07093e2bd842cfad58b7c9a92739e8e74560e829228c43dcfb9c6fafd9b12c6fe',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7f98469a2160>, <function to_hexbytes at 0x7f9842d8cb80>), <cyfunction identity at 0x7f9845c4c040>, <cyfunction identity at 0x7f9845c4c040>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7f98469a2160>, <function to_hexbytes at 0x7f9842d8cb80>)\nerror_formatters = <cyfunction identity at 0x7f9845c4c040>\nnull_result_formatters = <cyfunction identity at 0x7f9845c4c040>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f984003c280>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf9056c8085479b41354082642894c0374eee1d489ddfb8309b875a628f41c486d2a380b9050408650c7a000000000000000000000000000000...6f8ddad9297319d9f2599a7097b86b016e95ca13fdba01785ca07093e2bd842cfad58b7c9a92739e8e74560e829228c43dcfb9c6fafd9b12c6fe',)\nerror_formatters = <cyfunction identity at 0x7f9845c4c040>\nnull_result_formatters = <cyfunction identity at 0x7f9845c4c040>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f984003c280>\nresponse = {'error': {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xcb57b4cff00de52a6e18b12ecc973ad9e6ca88b9 have 1000000000000000 want 7885515847979520'}, 'id': 880, 'jsonrpc': '2.0'}\nparams = ('0xf9056c8085479b41354082642894c0374eee1d489ddfb8309b875a628f41c486d2a380b9050408650c7a000000000000000000000000000000...6f8ddad9297319d9f2599a7097b86b016e95ca13fdba01785ca07093e2bd842cfad58b7c9a92739e8e74560e829228c43dcfb9c6fafd9b12c6fe',)\nerror_formatters = <cyfunction identity at 0x7f9845c4c040>\nnull_result_formatters = <cyfunction identity at 0x7f9845c4c040>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xcb57b4cff00de52a6e18b12ecc973ad9e6ca88b9 have 1000000000000000 want 7885515847979520'}\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f9840013cd0>\n\n    def test_tx_interact_more_1kb_less_neon(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb) when less neon\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"Counter\", \"0.8.10\")\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_instruction = self.operator.get_solana_balance()\n        neon_balance_before_instruction = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           instruction_receipt = self.web3_client.send_transaction(acc2, instruction_tx)\nE           AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xcb57b4cff00de52a6e18b12ecc973ad9e6ca88b9 have 1000000000000000 want 7885515847979520'}\".\n\nintegration/tests/economy/test_economics.py:681: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1652256618620,
      "stop" : 1652256618620,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1652256618620,
      "stop" : 1652256618622,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1652256618622,
      "stop" : 1652256619215,
      "duration" : 593
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1652256619215,
      "stop" : 1652256619216,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1652256619215,
      "stop" : 1652256619215,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1652256619216,
      "stop" : 1652256621097,
      "duration" : 1881
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1652256619216,
      "stop" : 1652256619216,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1652256619216,
      "stop" : 1652256619216,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1652256621097,
      "stop" : 1652256621316,
      "duration" : 219
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 62.98323621$",
      "time" : {
        "start" : 1652256621316,
        "stop" : 1652256621316,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652256621317,
      "stop" : 1652256626555,
      "duration" : 5238
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1652256621317,
        "stop" : 1652256621328,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 5000 NEON from faucet for 0x7AA343fe7E9FbB1a2C13C625Fb84025c04323D32",
      "time" : {
        "start" : 1652256621328,
        "stop" : 1652256622237,
        "duration" : 909
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000394120019 NEON 73888.96776216 SOL",
      "time" : {
        "start" : 1652256626555,
        "stop" : 1652256626555,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1652256936898,
      "stop" : 1652256936898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1652256936898,
      "stop" : 1652256936898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652256936898,
      "stop" : 1652256936898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1652257009150,
      "stop" : 1652257013550,
      "duration" : 4400
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000394273111 NEON 73888.55988 SOL",
      "time" : {
        "start" : 1652257013451,
        "stop" : 1652257013451,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 4710.7735802271049552 NEON",
      "time" : {
        "start" : 1652257013550,
        "stop" : 1652257013550,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1652257013558,
      "stop" : 1652257013558,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az196-879"
  }, {
    "name" : "thread",
    "value" : "1957-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "978f68d390b085b2",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25o/55//#testresult/978f68d390b085b2",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x94e7fe59ccce92f51d2f78a3e1269bd7aff197cd have 1000000000000000 want 7608954830862720'}\".",
        "time" : {
          "start" : 1652255010305,
          "stop" : 1652255018271,
          "duration" : 7966
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7a5c617155fc583a.json",
  "parameterValues" : [ ]
}