{
  "uid" : "8b61d5129c7ca6d4",
  "name" : "test_deploy_contract_more_1kb_less_neon",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_deploy_contract_more_1kb_less_neon",
  "historyId" : "d10cf1e97bfb9f4f8047853751ac038a",
  "time" : {
    "start" : 1652255035139,
    "stop" : 1652255041615,
    "duration" : 6476
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x3653e89fa417053c17a462d3d376500fda18f021 have 1000000000000000 want 21223974650589634560'}\".",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f59c982f2b0>\n\n    def test_deploy_contract_more_1kb_less_neon(self):\n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           contract, contract_deploy_tx = self.deploy_and_get_contract(\"Fat\", \"0.8.10\", account=acc2)\n\nintegration/tests/economy/test_economics.py:754: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f59c982f2b0>\ncontract_name = 'Fat', version = '0.8.10'\naccount = <eth_account.signers.local.LocalAccount object at 0x7f59c9814d90>\nconstructor_args = None, gas = 0\n\n    def deploy_and_get_contract(\n        self,\n        contract_name: str,\n        version: str,\n        account: tp.Optional[eth_account.signers.local.LocalAccount] = None,\n        constructor_args: tp.Optional[tp.Any] = None,\n        gas: tp.Optional[int] = 0,\n    ):\n    \n        if account is None:\n            account = self.acc\n    \n        contract_interface = helpers.get_contract_interface(contract_name, version)\n    \n>       contract_deploy_tx = self.web3_client.deploy_contract(\n            account,\n            abi=contract_interface[\"abi\"],\n            bytecode=contract_interface[\"bin\"],\n            constructor_args=constructor_args,\n            gas=gas,\n        )\n\nintegration/tests/economy/test_economics.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7f59caed4340>\nfrom_ = <eth_account.signers.local.LocalAccount object at 0x7f59c9814d90>\nabi = [{'inputs': [], 'name': 'data', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutabilit... 'name': 'get', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', ...}]\nbytecode = '6080604052604051806104e001604052806104b081526020016104446104b0913960009080519060200190610035929190610048565b503480156...706a58347933355273713759624b777645364f316333654c7661794e78665479625a4c59396e5750596230786d796975574672644b6c3143465955'\ngas = 0, gas_price = 296761108848, constructor_args = []\n\n    def deploy_contract(\n        self,\n        from_: eth_account.signers.local.LocalAccount,\n        abi,\n        bytecode: str,\n        gas: tp.Optional[int] = 0,\n        gas_price: tp.Optional[int] = None,\n        constructor_args: tp.Optional[tp.List] = None,\n    ):\n        \"\"\"Proxy doesn't support send_transaction\"\"\"\n        gas_price = gas_price or self.gas_price()\n        constructor_args = constructor_args or []\n    \n        contract = self._web3.eth.contract(abi=abi, bytecode=bytecode)\n        transaction = contract.constructor(*constructor_args).buildTransaction(\n            {\n                \"chainId\": self._chain_id,\n                \"from\": from_.address,\n                \"gas\": gas,\n                \"gasPrice\": gas_price,\n                \"nonce\": self._web3.eth.get_transaction_count(from_.address),\n            }\n        )\n    \n        if transaction[\"gas\"] == 0:\n            transaction[\"gas\"] = self._web3.eth.estimate_gas(transaction)\n    \n        signed_tx = self._web3.eth.account.sign_transaction(transaction, from_.key)\n>       tx = self._web3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\nutils/web3client.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7f59cac64760>\ntransaction = HexBytes('0xf9094a808545185729708404434a008080b908f46080604052604051806104e001604052806104b081526020016104446104b09139...b21c804c6686541b035725b0f83d8511de3e366d0753fa3af96a00ef2e1f5996ae15ff59f0710f8fb03954656d45b6328876899557bada7bab261')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf9094a808545185729708404434a008080b908f46080604052604051806104e001604052806104b081526020016104446104b0913...1c804c6686541b035725b0f83d8511de3e366d0753fa3af96a00ef2e1f5996ae15ff59f0710f8fb03954656d45b6328876899557bada7bab261'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf9094a808545185729708404434a008080b908f46080604052604051806104e001604052806104b081526020016104446104b0913960009080...21c804c6686541b035725b0f83d8511de3e366d0753fa3af96a00ef2e1f5996ae15ff59f0710f8fb03954656d45b6328876899557bada7bab261',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7f59d161c160>, <function to_hexbytes at 0x7f59cda03b80>), <cyfunction identity at 0x7f59d08c6040>, <cyfunction identity at 0x7f59d08c6040>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7f59d161c160>, <function to_hexbytes at 0x7f59cda03b80>)\nerror_formatters = <cyfunction identity at 0x7f59d08c6040>\nnull_result_formatters = <cyfunction identity at 0x7f59d08c6040>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f59cac64b80>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf9094a808545185729708404434a008080b908f46080604052604051806104e001604052806104b081526020016104446104b0913960009080...21c804c6686541b035725b0f83d8511de3e366d0753fa3af96a00ef2e1f5996ae15ff59f0710f8fb03954656d45b6328876899557bada7bab261',)\nerror_formatters = <cyfunction identity at 0x7f59d08c6040>\nnull_result_formatters = <cyfunction identity at 0x7f59d08c6040>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f59cac64b80>\nresponse = {'error': {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x3653e89fa417053c17a462d3d376500fda18f021 have 1000000000000000 want 21223974650589634560'}, 'id': 971, 'jsonrpc': '2.0'}\nparams = ('0xf9094a808545185729708404434a008080b908f46080604052604051806104e001604052806104b081526020016104446104b0913960009080...21c804c6686541b035725b0f83d8511de3e366d0753fa3af96a00ef2e1f5996ae15ff59f0710f8fb03954656d45b6328876899557bada7bab261',)\nerror_formatters = <cyfunction identity at 0x7f59d08c6040>\nnull_result_formatters = <cyfunction identity at 0x7f59d08c6040>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x3653e89fa417053c17a462d3d376500fda18f021 have 1000000000000000 want 21223974650589634560'}\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f59c982f2b0>\n\n    def test_deploy_contract_more_1kb_less_neon(self):\n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           contract, contract_deploy_tx = self.deploy_and_get_contract(\"Fat\", \"0.8.10\", account=acc2)\nE           AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x3653e89fa417053c17a462d3d376500fda18f021 have 1000000000000000 want 21223974650589634560'}\".\n\nintegration/tests/economy/test_economics.py:754: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1652254692853,
      "stop" : 1652254692855,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1652254692853,
      "stop" : 1652254692853,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1652254692855,
      "stop" : 1652254693442,
      "duration" : 587
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1652254693442,
      "stop" : 1652254693442,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1652254693442,
      "stop" : 1652254693443,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1652254693442,
      "stop" : 1652254693442,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1652254693443,
      "stop" : 1652254694616,
      "duration" : 1173
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1652254693443,
      "stop" : 1652254693443,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1652254694617,
      "stop" : 1652254694912,
      "duration" : 295
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 61.23240786$",
      "time" : {
        "start" : 1652254694912,
        "stop" : 1652254694912,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652254694913,
      "stop" : 1652254700195,
      "duration" : 5282
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1652254694913,
        "stop" : 1652254694928,
        "duration" : 15
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 5000 NEON from faucet for 0x5Ff1a09FFE8d50C94E7c4B298Aa2Cf30617CA14B",
      "time" : {
        "start" : 1652254694928,
        "stop" : 1652254695851,
        "duration" : 923
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000393827764 NEON 73890.05585816 SOL",
      "time" : {
        "start" : 1652254700195,
        "stop" : 1652254700195,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652255035137,
      "stop" : 1652255035137,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1652255035137,
      "stop" : 1652255035137,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1652255035137,
      "stop" : 1652255035137,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1652255082546,
      "stop" : 1652255086966,
      "duration" : 4420
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000393959699 NEON 73889.6526894 SOL",
      "time" : {
        "start" : 1652255086866,
        "stop" : 1652255086866,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 4718.35351925641103488 NEON",
      "time" : {
        "start" : 1652255086965,
        "stop" : 1652255086965,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1652255086973,
      "stop" : 1652255086973,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az132-271"
  }, {
    "name" : "thread",
    "value" : "1815-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "8b61d5129c7ca6d4.json",
  "parameterValues" : [ ]
}