{
  "uid" : "19e9d30b1d40dc15",
  "name" : "test_tx_interact_more_1kb_less_neon",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_tx_interact_more_1kb_less_neon",
  "historyId" : "7ed5204cc689e25a60d93bc45ee24cf5",
  "time" : {
    "start" : 1652267918479,
    "stop" : 1652267926412,
    "duration" : 7933
  },
  "description" : "Send to contract a big text (tx more than 1 kb) when less neon",
  "descriptionHtml" : "<p>Send to contract a big text (tx more than 1 kb) when less neon</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xc45e85d7178815b5e21623542e6c03b05d1fcd13 have 1000000000000000 want 7864211572800000'}\".",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7fcd7fc53e80>\n\n    def test_tx_interact_more_1kb_less_neon(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb) when less neon\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"Counter\", \"0.8.10\")\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_instruction = self.operator.get_solana_balance()\n        neon_balance_before_instruction = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           instruction_receipt = self.web3_client.send_transaction(acc2, instruction_tx)\n\nintegration/tests/economy/test_economics.py:681: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7fcd80fffdf0>\naccount = <eth_account.signers.local.LocalAccount object at 0x7fcd7fc27160>\ntransaction = {'chainId': 111, 'data': '0x08650c7a0000000000000000000000000000000000000000000000000000000000000020000000000000000000...6f000000000000000000000000000000000000000000', 'from': '0xC45e85d7178815B5e21623542E6c03b05d1FCD13', 'gas': 25640, ...}\ngas = None\n\n    def send_transaction(\n        self, account: eth_account.signers.local.LocalAccount, transaction, gas: tp.Optional[int] = None\n    ):\n        if \"gasPrice\" not in transaction:\n            transaction[\"gasPrice\"] = (self.gas_price(),)\n    \n        if \"gas\" not in transaction:\n            transaction[\"gas\"] = self._web3.eth.estimate_gas(transaction)\n    \n        instruction_tx = self._web3.eth.account.sign_transaction(transaction, account.key)\n>       signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n\nutils/web3client.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7fcd80fff580>\ntransaction = HexBytes('0xf9056c80854769baae4082642894af46dc75534da1ab4904fff3033016b1091d568080b9050408650c7a0000000000000000000000...e011d9a55cc6076cea9f6fd436cb7e597ab99e20741a74813c0a07047fc91a0bbd371fd299f0d27fbb9f7a8faef500274a707f8db307458940144')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf9056c80854769baae4082642894af46dc75534da1ab4904fff3033016b1091d568080b9050408650c7a000000000000000000000...11d9a55cc6076cea9f6fd436cb7e597ab99e20741a74813c0a07047fc91a0bbd371fd299f0d27fbb9f7a8faef500274a707f8db307458940144'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf9056c80854769baae4082642894af46dc75534da1ab4904fff3033016b1091d568080b9050408650c7a000000000000000000000000000000...011d9a55cc6076cea9f6fd436cb7e597ab99e20741a74813c0a07047fc91a0bbd371fd299f0d27fbb9f7a8faef500274a707f8db307458940144',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7fcd87965160>, <function to_hexbytes at 0x7fcd83d52b80>), <cyfunction identity at 0x7fcd86c0f040>, <cyfunction identity at 0x7fcd86c0f040>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7fcd87965160>, <function to_hexbytes at 0x7fcd83d52b80>)\nerror_formatters = <cyfunction identity at 0x7fcd86c0f040>\nnull_result_formatters = <cyfunction identity at 0x7fcd86c0f040>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7fcd80fff1c0>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf9056c80854769baae4082642894af46dc75534da1ab4904fff3033016b1091d568080b9050408650c7a000000000000000000000000000000...011d9a55cc6076cea9f6fd436cb7e597ab99e20741a74813c0a07047fc91a0bbd371fd299f0d27fbb9f7a8faef500274a707f8db307458940144',)\nerror_formatters = <cyfunction identity at 0x7fcd86c0f040>\nnull_result_formatters = <cyfunction identity at 0x7fcd86c0f040>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7fcd80fff1c0>\nresponse = {'error': {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xc45e85d7178815b5e21623542e6c03b05d1fcd13 have 1000000000000000 want 7864211572800000'}, 'id': 880, 'jsonrpc': '2.0'}\nparams = ('0xf9056c80854769baae4082642894af46dc75534da1ab4904fff3033016b1091d568080b9050408650c7a000000000000000000000000000000...011d9a55cc6076cea9f6fd436cb7e597ab99e20741a74813c0a07047fc91a0bbd371fd299f0d27fbb9f7a8faef500274a707f8db307458940144',)\nerror_formatters = <cyfunction identity at 0x7fcd86c0f040>\nnull_result_formatters = <cyfunction identity at 0x7fcd86c0f040>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xc45e85d7178815b5e21623542e6c03b05d1fcd13 have 1000000000000000 want 7864211572800000'}\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7fcd7fc53e80>\n\n    def test_tx_interact_more_1kb_less_neon(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb) when less neon\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"Counter\", \"0.8.10\")\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_instruction = self.operator.get_solana_balance()\n        neon_balance_before_instruction = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           instruction_receipt = self.web3_client.send_transaction(acc2, instruction_tx)\nE           AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xc45e85d7178815b5e21623542e6c03b05d1fcd13 have 1000000000000000 want 7864211572800000'}\".\n\nintegration/tests/economy/test_economics.py:681: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1652267604275,
      "stop" : 1652267604276,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1652267604275,
      "stop" : 1652267604275,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1652267604277,
      "stop" : 1652267604858,
      "duration" : 581
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1652267604858,
      "stop" : 1652267604858,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1652267604858,
      "stop" : 1652267604858,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1652267604858,
      "stop" : 1652267604858,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1652267604858,
      "stop" : 1652267604858,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1652267604858,
      "stop" : 1652267606485,
      "duration" : 1627
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1652267606486,
      "stop" : 1652267606535,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 64.6135$",
      "time" : {
        "start" : 1652267606535,
        "stop" : 1652267606535,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652267606535,
      "stop" : 1652267611739,
      "duration" : 5204
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1652267606535,
        "stop" : 1652267606546,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 5000 NEON from faucet for 0x84AF92C6a3E5c1aDAAF812E33295dc02F4CD3C8a",
      "time" : {
        "start" : 1652267606546,
        "stop" : 1652267607452,
        "duration" : 906
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000394852615 NEON 73885.84039828 SOL",
      "time" : {
        "start" : 1652267611739,
        "stop" : 1652267611739,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1652267918478,
      "stop" : 1652267918478,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652267918478,
      "stop" : 1652267918478,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1652267918478,
      "stop" : 1652267918478,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1652267990205,
      "stop" : 1652267994588,
      "duration" : 4383
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000395172689 NEON 73884.75677216 SOL",
      "time" : {
        "start" : 1652267994487,
        "stop" : 1652267994487,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 4710.71549917789696 NEON",
      "time" : {
        "start" : 1652267994588,
        "stop" : 1652267994588,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1652267994594,
      "stop" : 1652267994594,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az196-879"
  }, {
    "name" : "thread",
    "value" : "1814-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "278eb4c5ec3a4e42",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/61//#testresult/278eb4c5ec3a4e42",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x41881f1960aa774ee31e2402f059c965370ff27d have 1000000000000000 want 8072244481920000'}\".",
        "time" : {
          "start" : 1652263522454,
          "stop" : 1652263532292,
          "duration" : 9838
        }
      }, {
        "uid" : "4fbe0a1f91d69073",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/57//#testresult/4fbe0a1f91d69073",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xeafbb101af2e0358581f7988a36936aa8ca8bef9 have 1000000000000000 want 7619540436960000'}\".",
        "time" : {
          "start" : 1652255921491,
          "stop" : 1652255933967,
          "duration" : 12476
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "19e9d30b1d40dc15.json",
  "parameterValues" : [ ]
}