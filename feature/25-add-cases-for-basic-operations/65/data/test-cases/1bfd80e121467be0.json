{
  "uid" : "1bfd80e121467be0",
  "name" : "test_tx_interact_more_1kb_less_neon",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_tx_interact_more_1kb_less_neon",
  "historyId" : "7ed5204cc689e25a60d93bc45ee24cf5",
  "time" : {
    "start" : 1652269764995,
    "stop" : 1652269773073,
    "duration" : 8078
  },
  "description" : "Send to contract a big text (tx more than 1 kb) when less neon",
  "descriptionHtml" : "<p>Send to contract a big text (tx more than 1 kb) when less neon</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xfc50375e67ed59d1672bd8efa53dab1d58f4b330 have 1000000000000000 want 7631797485120000'}\".",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f58cd1a4760>\n\n    def test_tx_interact_more_1kb_less_neon(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb) when less neon\"\"\"\n        contract, contract_deploy_tx = self.web3_client.deploy_and_get_contract(\"Counter\", \"0.8.10\", account=self.acc)\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_instruction = self.operator.get_solana_balance()\n        neon_balance_before_instruction = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           instruction_receipt = self.web3_client.send_transaction(acc2, instruction_tx)\n\nintegration/tests/economy/test_economics.py:661: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7f58ce7cb7f0>\naccount = <eth_account.signers.local.LocalAccount object at 0x7f58cd362b20>\ntransaction = {'chainId': 111, 'data': '0x08650c7a0000000000000000000000000000000000000000000000000000000000000020000000000000000000...6f000000000000000000000000000000000000000000', 'from': '0xFc50375e67Ed59D1672BD8EfA53DaB1d58f4B330', 'gas': 25640, ...}\ngas = None\n\n    def send_transaction(\n        self, account: eth_account.signers.local.LocalAccount, transaction, gas: tp.Optional[int] = None\n    ):\n        if \"gasPrice\" not in transaction:\n            transaction[\"gasPrice\"] = (self.gas_price(),)\n    \n        if \"gas\" not in transaction:\n            transaction[\"gas\"] = self._web3.eth.estimate_gas(transaction)\n    \n        instruction_tx = self._web3.eth.account.sign_transaction(transaction, account.key)\n>       signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n\nutils/web3client.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7f58ce78c550>\ntransaction = HexBytes('0xf9056c8085454d713440826428943a04e5072d062fcefff7d75346d75461766a2cf580b9050408650c7a0000000000000000000000...561c00e9b1d9eb233bba90e8766eb2518cf786f00ba10e619b9a0090e2be5a5520e960958e06e5e32ee8416ea0aad9addcc453ab71d22153d938e')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf9056c8085454d713440826428943a04e5072d062fcefff7d75346d75461766a2cf580b9050408650c7a000000000000000000000...1c00e9b1d9eb233bba90e8766eb2518cf786f00ba10e619b9a0090e2be5a5520e960958e06e5e32ee8416ea0aad9addcc453ab71d22153d938e'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf9056c8085454d713440826428943a04e5072d062fcefff7d75346d75461766a2cf580b9050408650c7a000000000000000000000000000000...61c00e9b1d9eb233bba90e8766eb2518cf786f00ba10e619b9a0090e2be5a5520e960958e06e5e32ee8416ea0aad9addcc453ab71d22153d938e',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7f58d5085160>, <function to_hexbytes at 0x7f58d14b0b80>), <cyfunction identity at 0x7f58d4329040>, <cyfunction identity at 0x7f58d4329040>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7f58d5085160>, <function to_hexbytes at 0x7f58d14b0b80>)\nerror_formatters = <cyfunction identity at 0x7f58d4329040>\nnull_result_formatters = <cyfunction identity at 0x7f58d4329040>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f58ce78cfd0>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf9056c8085454d713440826428943a04e5072d062fcefff7d75346d75461766a2cf580b9050408650c7a000000000000000000000000000000...61c00e9b1d9eb233bba90e8766eb2518cf786f00ba10e619b9a0090e2be5a5520e960958e06e5e32ee8416ea0aad9addcc453ab71d22153d938e',)\nerror_formatters = <cyfunction identity at 0x7f58d4329040>\nnull_result_formatters = <cyfunction identity at 0x7f58d4329040>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f58ce78cfd0>\nresponse = {'error': {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xfc50375e67ed59d1672bd8efa53dab1d58f4b330 have 1000000000000000 want 7631797485120000'}, 'id': 852, 'jsonrpc': '2.0'}\nparams = ('0xf9056c8085454d713440826428943a04e5072d062fcefff7d75346d75461766a2cf580b9050408650c7a000000000000000000000000000000...61c00e9b1d9eb233bba90e8766eb2518cf786f00ba10e619b9a0090e2be5a5520e960958e06e5e32ee8416ea0aad9addcc453ab71d22153d938e',)\nerror_formatters = <cyfunction identity at 0x7f58d4329040>\nnull_result_formatters = <cyfunction identity at 0x7f58d4329040>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xfc50375e67ed59d1672bd8efa53dab1d58f4b330 have 1000000000000000 want 7631797485120000'}\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f58cd1a4760>\n\n    def test_tx_interact_more_1kb_less_neon(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb) when less neon\"\"\"\n        contract, contract_deploy_tx = self.web3_client.deploy_and_get_contract(\"Counter\", \"0.8.10\", account=self.acc)\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_instruction = self.operator.get_solana_balance()\n        neon_balance_before_instruction = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           instruction_receipt = self.web3_client.send_transaction(acc2, instruction_tx)\nE           AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xfc50375e67ed59d1672bd8efa53dab1d58f4b330 have 1000000000000000 want 7631797485120000'}\".\n\nintegration/tests/economy/test_economics.py:661: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1652269458135,
      "stop" : 1652269458135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1652269458135,
      "stop" : 1652269458137,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1652269458137,
      "stop" : 1652269458735,
      "duration" : 598
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1652269458737,
      "stop" : 1652269459462,
      "duration" : 725
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1652269459463,
      "stop" : 1652269459726,
      "duration" : 263
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 62.25644395$",
      "time" : {
        "start" : 1652269459725,
        "stop" : 1652269459725,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652269459726,
      "stop" : 1652269464963,
      "duration" : 5237
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1652269459726,
        "stop" : 1652269459737,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 5000 NEON from faucet for 0xB72517843256B7B2148de52F26Fb7c4912Bb69BD",
      "time" : {
        "start" : 1652269459737,
        "stop" : 1652269460656,
        "duration" : 919
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000395172689 NEON 73884.75520812 SOL",
      "time" : {
        "start" : 1652269464963,
        "stop" : 1652269464963,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1652269764994,
      "stop" : 1652269764994,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652269764994,
      "stop" : 1652269764994,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1652269764994,
      "stop" : 1652269764994,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1652269837330,
      "stop" : 1652269841799,
      "duration" : 4469
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.00039524858 NEON 73884.55947336 SOL",
      "time" : {
        "start" : 1652269841701,
        "stop" : 1652269841701,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 4726.0646855658688 NEON",
      "time" : {
        "start" : 1652269841799,
        "stop" : 1652269841799,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1652269841804,
      "stop" : 1652269841805,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az193-59"
  }, {
    "name" : "thread",
    "value" : "1844-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "19e9d30b1d40dc15",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/63//#testresult/19e9d30b1d40dc15",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xc45e85d7178815b5e21623542e6c03b05d1fcd13 have 1000000000000000 want 7864211572800000'}\".",
        "time" : {
          "start" : 1652267918479,
          "stop" : 1652267926412,
          "duration" : 7933
        }
      }, {
        "uid" : "278eb4c5ec3a4e42",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/61//#testresult/278eb4c5ec3a4e42",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x41881f1960aa774ee31e2402f059c965370ff27d have 1000000000000000 want 8072244481920000'}\".",
        "time" : {
          "start" : 1652263522454,
          "stop" : 1652263532292,
          "duration" : 9838
        }
      }, {
        "uid" : "4fbe0a1f91d69073",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/57//#testresult/4fbe0a1f91d69073",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xeafbb101af2e0358581f7988a36936aa8ca8bef9 have 1000000000000000 want 7619540436960000'}\".",
        "time" : {
          "start" : 1652255921491,
          "stop" : 1652255933967,
          "duration" : 12476
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1bfd80e121467be0.json",
  "parameterValues" : [ ]
}