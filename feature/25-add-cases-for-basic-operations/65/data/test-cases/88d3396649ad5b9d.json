{
  "uid" : "88d3396649ad5b9d",
  "name" : "test_cost_resize_account_less_neon",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_cost_resize_account_less_neon",
  "historyId" : "9d327d1509b92a4e85b0526c0aacb74f",
  "time" : {
    "start" : 1652269705769,
    "stop" : 1652269713740,
    "duration" : 7971
  },
  "description" : "Verify how much cost account resize",
  "descriptionHtml" : "<p>Verify how much cost account resize</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x55f5e06ddfda4c357695cae05246bb5523f8f039 have 1000000000000000 want 6675893928943200000'}\".",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f58ce61bc40>\n\n    def test_cost_resize_account_less_neon(self):\n        \"\"\"Verify how much cost account resize\"\"\"\n        contract, contract_deploy_tx = self.web3_client.deploy_and_get_contract(\n            \"IncreaseStorage\", \"0.8.10\", account=self.acc\n        )\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_increase = self.operator.get_solana_balance()\n        neon_balance_before_increase = self.operator.get_neon_balance()\n    \n        inc_tx = contract.functions.inc().buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n    \n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           self.web3_client.send_transaction(acc2, inc_tx)\n\nintegration/tests/economy/test_economics.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7f58ce7cb7f0>\naccount = <eth_account.signers.local.LocalAccount object at 0x7f58ce7c4790>\ntransaction = {'chainId': 111, 'data': '0x371303c0', 'from': '0x55f5E06DdfDA4c357695cae05246BB5523F8f039', 'gas': 22356900, ...}\ngas = None\n\n    def send_transaction(\n        self, account: eth_account.signers.local.LocalAccount, transaction, gas: tp.Optional[int] = None\n    ):\n        if \"gasPrice\" not in transaction:\n            transaction[\"gasPrice\"] = (self.gas_price(),)\n    \n        if \"gas\" not in transaction:\n            transaction[\"gas\"] = self._web3.eth.estimate_gas(transaction)\n    \n        instruction_tx = self._web3.eth.account.sign_transaction(transaction, account.key)\n>       signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n\nutils/web3client.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7f58ce78c550>\ntransaction = HexBytes('0xf86c8085458646c3c084015523a4940daa3b0d807f068e875448e64d5438ba4959ccfa8084371303c0820102a08d22cf646f788ab0eae7e0299c6a9adb12f1147d298055b1b40a62a52b7af484a04a455e3c093a67d85e0344b230f59c917ecd9bd60ac54b899a71c6e6138f2080')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf86c8085458646c3c084015523a4940daa3b0d807f068e875448e64d5438ba4959ccfa8084371303c0820102a08d22cf646f788ab0eae7e0299c6a9adb12f1147d298055b1b40a62a52b7af484a04a455e3c093a67d85e0344b230f59c917ecd9bd60ac54b899a71c6e6138f2080'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf86c8085458646c3c084015523a4940daa3b0d807f068e875448e64d5438ba4959ccfa8084371303c0820102a08d22cf646f788ab0eae7e0299c6a9adb12f1147d298055b1b40a62a52b7af484a04a455e3c093a67d85e0344b230f59c917ecd9bd60ac54b899a71c6e6138f2080',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7f58d5085160>, <function to_hexbytes at 0x7f58d14b0b80>), <cyfunction identity at 0x7f58d4329040>, <cyfunction identity at 0x7f58d4329040>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7f58d5085160>, <function to_hexbytes at 0x7f58d14b0b80>)\nerror_formatters = <cyfunction identity at 0x7f58d4329040>\nnull_result_formatters = <cyfunction identity at 0x7f58d4329040>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f58ce78cfd0>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf86c8085458646c3c084015523a4940daa3b0d807f068e875448e64d5438ba4959ccfa8084371303c0820102a08d22cf646f788ab0eae7e0299c6a9adb12f1147d298055b1b40a62a52b7af484a04a455e3c093a67d85e0344b230f59c917ecd9bd60ac54b899a71c6e6138f2080',)\nerror_formatters = <cyfunction identity at 0x7f58d4329040>\nnull_result_formatters = <cyfunction identity at 0x7f58d4329040>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f58ce78cfd0>\nresponse = {'error': {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x55f5e06ddfda4c357695cae05246bb5523f8f039 have 1000000000000000 want 6675893928943200000'}, 'id': 626, 'jsonrpc': '2.0'}\nparams = ('0xf86c8085458646c3c084015523a4940daa3b0d807f068e875448e64d5438ba4959ccfa8084371303c0820102a08d22cf646f788ab0eae7e0299c6a9adb12f1147d298055b1b40a62a52b7af484a04a455e3c093a67d85e0344b230f59c917ecd9bd60ac54b899a71c6e6138f2080',)\nerror_formatters = <cyfunction identity at 0x7f58d4329040>\nnull_result_formatters = <cyfunction identity at 0x7f58d4329040>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x55f5e06ddfda4c357695cae05246bb5523f8f039 have 1000000000000000 want 6675893928943200000'}\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f58ce61bc40>\n\n    def test_cost_resize_account_less_neon(self):\n        \"\"\"Verify how much cost account resize\"\"\"\n        contract, contract_deploy_tx = self.web3_client.deploy_and_get_contract(\n            \"IncreaseStorage\", \"0.8.10\", account=self.acc\n        )\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_increase = self.operator.get_solana_balance()\n        neon_balance_before_increase = self.operator.get_neon_balance()\n    \n        inc_tx = contract.functions.inc().buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n    \n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           self.web3_client.send_transaction(acc2, inc_tx)\nE           AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x55f5e06ddfda4c357695cae05246bb5523f8f039 have 1000000000000000 want 6675893928943200000'}\".\n\nintegration/tests/economy/test_economics.py:441: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1652269458135,
      "stop" : 1652269458135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1652269458135,
      "stop" : 1652269458137,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1652269458137,
      "stop" : 1652269458735,
      "duration" : 598
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1652269458736,
      "stop" : 1652269458736,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1652269458737,
      "stop" : 1652269459462,
      "duration" : 725
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1652269459463,
      "stop" : 1652269459726,
      "duration" : 263
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 62.25644395$",
      "time" : {
        "start" : 1652269459725,
        "stop" : 1652269459725,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652269459726,
      "stop" : 1652269464963,
      "duration" : 5237
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1652269459726,
        "stop" : 1652269459737,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 5000 NEON from faucet for 0xB72517843256B7B2148de52F26Fb7c4912Bb69BD",
      "time" : {
        "start" : 1652269459737,
        "stop" : 1652269460656,
        "duration" : 919
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000395172689 NEON 73884.75520812 SOL",
      "time" : {
        "start" : 1652269464963,
        "stop" : 1652269464963,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1652269705768,
      "stop" : 1652269705768,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1652269705768,
      "stop" : 1652269705768,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652269705768,
      "stop" : 1652269705768,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1652269837330,
      "stop" : 1652269841799,
      "duration" : 4469
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.00039524858 NEON 73884.55947336 SOL",
      "time" : {
        "start" : 1652269841701,
        "stop" : 1652269841701,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 4726.0646855658688 NEON",
      "time" : {
        "start" : 1652269841799,
        "stop" : 1652269841799,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1652269841804,
      "stop" : 1652269841805,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az193-59"
  }, {
    "name" : "thread",
    "value" : "1844-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "2d72d0b00c262bc7",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/63//#testresult/2d72d0b00c262bc7",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0xb068d5f6ccb4e94cabc9204252b42019da63eb2f have 1000000000000000 want 6874542855072000000'}\".",
        "time" : {
          "start" : 1652267852582,
          "stop" : 1652267860969,
          "duration" : 8387
        }
      }, {
        "uid" : "473c5e34f0c7a476",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/61//#testresult/473c5e34f0c7a476",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4fd9f2bfcd866a466c918a30ac7ceb4cd7f0c210 have 1000000000000000 want 7032735271526400000'}\".",
        "time" : {
          "start" : 1652263437131,
          "stop" : 1652263447471,
          "duration" : 10340
        }
      }, {
        "uid" : "69719ee5840b56c0",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/57//#testresult/69719ee5840b56c0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4b74c1db6076aec37ed61a050127cef9652fbecc have 1000000000000000 want 6593744662452000000'}\".",
        "time" : {
          "start" : 1652255817492,
          "stop" : 1652255829885,
          "duration" : 12393
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "88d3396649ad5b9d.json",
  "parameterValues" : [ ]
}