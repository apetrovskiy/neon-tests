{
  "uid" : "473c5e34f0c7a476",
  "name" : "test_cost_resize_account_less_neon",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_cost_resize_account_less_neon",
  "historyId" : "9d327d1509b92a4e85b0526c0aacb74f",
  "time" : {
    "start" : 1652263437131,
    "stop" : 1652263447471,
    "duration" : 10340
  },
  "description" : "Verify how much cost account resize",
  "descriptionHtml" : "<p>Verify how much cost account resize</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4fd9f2bfcd866a466c918a30ac7ceb4cd7f0c210 have 1000000000000000 want 7032735271526400000'}\".",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f84ed71cee0>\n\n    def test_cost_resize_account_less_neon(self):\n        \"\"\"Verify how much cost account resize\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"IncreaseStorage\", \"0.8.10\")\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_increase = self.operator.get_solana_balance()\n        neon_balance_before_increase = self.operator.get_neon_balance()\n    \n        inc_tx = contract.functions.inc().buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n    \n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           self.web3_client.send_transaction(acc2, inc_tx)\n\nintegration/tests/economy/test_economics.py:461: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.web3client.NeonWeb3Client object at 0x7f84ed7d5130>\naccount = <eth_account.signers.local.LocalAccount object at 0x7f84ec24d7f0>\ntransaction = {'chainId': 111, 'data': '0x371303c0', 'from': '0x4FD9f2bFcD866A466c918a30AC7ceB4Cd7F0c210', 'gas': 22356900, ...}\ngas = None\n\n    def send_transaction(\n        self, account: eth_account.signers.local.LocalAccount, transaction, gas: tp.Optional[int] = None\n    ):\n        if \"gasPrice\" not in transaction:\n            transaction[\"gasPrice\"] = (self.gas_price(),)\n    \n        if \"gas\" not in transaction:\n            transaction[\"gas\"] = self._web3.eth.estimate_gas(transaction)\n    \n        instruction_tx = self._web3.eth.account.sign_transaction(transaction, account.key)\n>       signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n\nutils/web3client.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.eth.Eth object at 0x7f84ed55c640>\ntransaction = HexBytes('0xf86c8085493da2400084015523a49494b90b5935b8401ef1ef1e9786bb469e6a3e217d8084371303c0820101a0cdc21266606c9df696b8c0395a876122431054b5dab970b5e8beb5e5fedd0098a07b82f360a9e74a259d167875961993ed0571db158635406ebe7f9e16c4099d37')\n\n    def send_raw_transaction(self, transaction: Union[HexStr, bytes]) -> HexBytes:\n>       return self._send_raw_transaction(transaction)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/eth.py:783: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (HexBytes('0xf86c8085493da2400084015523a49494b90b5935b8401ef1ef1e9786bb469e6a3e217d8084371303c0820101a0cdc21266606c9df696b8c0395a876122431054b5dab970b5e8beb5e5fedd0098a07b82f360a9e74a259d167875961993ed0571db158635406ebe7f9e16c4099d37'),)\nkwargs = {}, method_str = 'eth_sendRawTransaction'\nparams = ('0xf86c8085493da2400084015523a49494b90b5935b8401ef1ef1e9786bb469e6a3e217d8084371303c0820101a0cdc21266606c9df696b8c0395a876122431054b5dab970b5e8beb5e5fedd0098a07b82f360a9e74a259d167875961993ed0571db158635406ebe7f9e16c4099d37',)\nresponse_formatters = (Compose(<function apply_formatter_if at 0x7f84f3f14160>, <function to_hexbytes at 0x7f84f0304b80>), <cyfunction identity at 0x7f84f31be040>, <cyfunction identity at 0x7f84f31be040>)\nresult_formatters = Compose(<function apply_formatter_if at 0x7f84f3f14160>, <function to_hexbytes at 0x7f84f0304b80>)\nerror_formatters = <cyfunction identity at 0x7f84f31be040>\nnull_result_formatters = <cyfunction identity at 0x7f84f31be040>\n\n    def caller(*args: Any, **kwargs: Any) -> Union[TReturn, LogFilter]:\n        try:\n            (method_str, params), response_formatters = method.process_params(module, *args, **kwargs)  # noqa: E501\n        except _UseExistingFilter as err:\n            return LogFilter(eth_module=module, filter_id=err.filter_id)\n        result_formatters, error_formatters, null_result_formatters = response_formatters\n>       result = w3.manager.request_blocking(method_str,\n                                             params,\n                                             error_formatters,\n                                             null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/module.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f84ed55cdc0>\nmethod = 'eth_sendRawTransaction'\nparams = ('0xf86c8085493da2400084015523a49494b90b5935b8401ef1ef1e9786bb469e6a3e217d8084371303c0820101a0cdc21266606c9df696b8c0395a876122431054b5dab970b5e8beb5e5fedd0098a07b82f360a9e74a259d167875961993ed0571db158635406ebe7f9e16c4099d37',)\nerror_formatters = <cyfunction identity at 0x7f84f31be040>\nnull_result_formatters = <cyfunction identity at 0x7f84f31be040>\n\n    def request_blocking(\n        self,\n        method: Union[RPCEndpoint, Callable[..., RPCEndpoint]],\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n>       return self.formatted_response(response,\n                                       params,\n                                       error_formatters,\n                                       null_result_formatters)\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f84ed55cdc0>\nresponse = {'error': {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4fd9f2bfcd866a466c918a30ac7ceb4cd7f0c210 have 1000000000000000 want 7032735271526400000'}, 'id': 629, 'jsonrpc': '2.0'}\nparams = ('0xf86c8085493da2400084015523a49494b90b5935b8401ef1ef1e9786bb469e6a3e217d8084371303c0820101a0cdc21266606c9df696b8c0395a876122431054b5dab970b5e8beb5e5fedd0098a07b82f360a9e74a259d167875961993ed0571db158635406ebe7f9e16c4099d37',)\nerror_formatters = <cyfunction identity at 0x7f84f31be040>\nnull_result_formatters = <cyfunction identity at 0x7f84f31be040>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4fd9f2bfcd866a466c918a30ac7ceb4cd7f0c210 have 1000000000000000 want 7032735271526400000'}\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f84ed71cee0>\n\n    def test_cost_resize_account_less_neon(self):\n        \"\"\"Verify how much cost account resize\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"IncreaseStorage\", \"0.8.10\")\n    \n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 0.001)\n    \n        sol_balance_before_increase = self.operator.get_solana_balance()\n        neon_balance_before_increase = self.operator.get_neon_balance()\n    \n        inc_tx = contract.functions.inc().buildTransaction(\n            {\n                \"from\": acc2.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(acc2.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n            }\n        )\n    \n        with pytest.raises(ValueError, match=\"The account balance is less than required\"):\n>           self.web3_client.send_transaction(acc2, inc_tx)\nE           AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4fd9f2bfcd866a466c918a30ac7ceb4cd7f0c210 have 1000000000000000 want 7032735271526400000'}\".\n\nintegration/tests/economy/test_economics.py:461: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1652263135811,
      "stop" : 1652263135812,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1652263135811,
      "stop" : 1652263135811,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1652263135813,
      "stop" : 1652263136775,
      "duration" : 962
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1652263136776,
      "stop" : 1652263136776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1652263136776,
      "stop" : 1652263136776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1652263136776,
      "stop" : 1652263136776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1652263136776,
      "stop" : 1652263139110,
      "duration" : 2334
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1652263136776,
      "stop" : 1652263136776,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1652263139110,
      "stop" : 1652263139331,
      "duration" : 221
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 66.03999999$",
      "time" : {
        "start" : 1652263139331,
        "stop" : 1652263139331,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652263139331,
      "stop" : 1652263146654,
      "duration" : 7323
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1652263139331,
        "stop" : 1652263139343,
        "duration" : 12
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 5000 NEON from faucet for 0x2b825c9d7654F883dF95EFA8fC41C5bfFF56e81C",
      "time" : {
        "start" : 1652263139343,
        "stop" : 1652263140448,
        "duration" : 1105
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000394396817 NEON 73887.75475828 SOL",
      "time" : {
        "start" : 1652263146654,
        "stop" : 1652263146654,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1652263437130,
      "stop" : 1652263437130,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1652263437130,
      "stop" : 1652263437130,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1652263437130,
      "stop" : 1652263437130,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1652263615491,
      "stop" : 1652263621342,
      "duration" : 5851
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000394512185 NEON 73887.45120772 SOL",
      "time" : {
        "start" : 1652263621211,
        "stop" : 1652263621211,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 4705.69785496348624 NEON",
      "time" : {
        "start" : 1652263621342,
        "stop" : 1652263621342,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1652263621348,
      "stop" : 1652263621348,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az296-623"
  }, {
    "name" : "thread",
    "value" : "1883-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "69719ee5840b56c0",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/57//#testresult/69719ee5840b56c0",
        "status" : "failed",
        "statusDetails" : "AssertionError: Regex pattern 'The account balance is less than required' does not match \"{'code': -32000, 'message': 'insufficient funds for gas * price + value: address 0x4b74c1db6076aec37ed61a050127cef9652fbecc have 1000000000000000 want 6593744662452000000'}\".",
        "time" : {
          "start" : 1652255817492,
          "stop" : 1652255829885,
          "duration" : 12393
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "473c5e34f0c7a476.json",
  "parameterValues" : [ ]
}