{
  "uid" : "9739f5c30da7e531",
  "name" : "test_generate_bad_sign[1-None-gas limit reached]",
  "fullName" : "integration.tests.basic.test_transfers.TestTransactionsValidation#test_generate_bad_sign",
  "historyId" : "1dc9a796caa4f289be5db5c12b4e6d3c",
  "time" : {
    "start" : 1650645653642,
    "stop" : 1650645655855,
    "duration" : 2213
  },
  "description" : "Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        ",
  "descriptionHtml" : "<p>Generate bad sign (when v, r, s over allowed size)<br />\nToo low gas_limit<br />\nToo high gas_limit &gt; u64::max<br />\nToo high gas_limit &gt; u64::max<br />\nToo high gas_price &gt; u64::max<br />\nToo high gas_limit * gas_price &gt; u64::max</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0x33d3c5c4b92ee9ff0408e90ad5aa142b19be0b07 want 10000000000000000'}) tblen=6>",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransactionsValidation object at 0x7f6b64767340>\ngas_limit = 1, gas_price = None, expected_message = 'gas limit reached'\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        \"\"\"\n    \n        #\n        amount = 0\n        sender_account = self.create_account_with_balance(amount)\n        recipient_account = self.create_account_with_balance()\n        #\n    \n>       self.process_transaction_with_failure(\n            # self.sender_account,\n            # self.recipient_account,\n            sender_account,\n            recipient_account,\n            amount=InputData.DEFAULT_TRANSFER_AMOUNT.value,\n            gas=gas_limit,\n            gas_price=gas_price,\n            error_message=expected_message,\n        )\n\nintegration/tests/basic/test_transfers.py:267: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestTransactionsValidation object at 0x7f6b64767340>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7f6b647a08e0>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7f6b647a0b80>\namount = 0.01, gas = 1, gas_price = None, error_message = 'gas limit reached'\n\n    def process_transaction_with_failure(\n        self,\n        sender_account: Account,\n        # <<<<<<< HEAD\n        #         recipient_account: Union[Account, AccountData],\n        #         amount: int,\n        #         gas: Optional[int] = 0,\n        #         gas_price: Optional[int] = None,\n        #         error_message: str = \"\",\n        #     ) -> Union[web3.types.TxReceipt, None]:\n        #         \"\"\"Processes transaction, expects a failure\"\"\"\n        #         tx: Union[web3.types.TxReceipt, None] = None\n        #         with allure.step(f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"):\n        #             with pytest.raises(Exception) as error_info:\n        #                 tx = self.web3_client.send_neon(sender_account, recipient_account, amount, gas, gas_price)\n        #             if error_info != None:\n        #                 if error_message:\n        #                     assert error_message in str(error_info), f\"Expected {error_message} to be in {error_info}\"\n        #                 assert None != error_info, \"Transaction failed\"\n        #             return tx\n        # =======\n        recipient_account: tp.Union[Account, AccountData],\n        amount: int,\n        gas: Optional[int] = 0,\n        gas_price: Optional[int] = None,\n        error_message: str = \"\",\n    ) -> tp.Union[web3.types.TxReceipt, None]:\n        \"\"\"Processes transaction, expects a failure\"\"\"\n        tx: tp.Union[web3.types.TxReceipt, None] = None\n        with allure.step(f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"):\n            with pytest.raises(Exception) as error_info:\n                tx = self.web3_client.send_neon(sender_account, recipient_account, amount)\n            assert error_info, \"Transaction not failed\"\n            if error_message:\n>               assert error_message in str(error_info.value), f\"Expected {error_message} to be in {error_info}\"\nE               AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0x33d3c5c4b92ee9ff0408e90ad5aa142b19be0b07 want 10000000000000000'}) tblen=6>\n\nintegration/tests/basic/helpers/basic.py:124: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650645421865,
      "stop" : 1650645421866,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1650645421866,
      "stop" : 1650645421868,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650645421868,
      "stop" : 1650645422948,
      "duration" : 1080
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650645422948,
      "stop" : 1650645422948,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1650645422948,
      "stop" : 1650645422949,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650645422949,
      "stop" : 1650645422949,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650645422949,
      "stop" : 1650645422949,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650645645397,
      "stop" : 1650645645397,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650645645397,
      "stop" : 1650645653640,
      "duration" : 8243
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650645645397,
        "stop" : 1650645645401,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x2229725bB34595DF40b34bBE03FC08F36f6cD881",
      "time" : {
        "start" : 1650645645401,
        "stop" : 1650645646252,
        "duration" : 851
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.007822384662327904223808 NEON 60722.3282314 SOL",
      "time" : {
        "start" : 1650645653640,
        "stop" : 1650645653640,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_env",
    "time" : {
      "start" : 1650645653641,
      "stop" : 1650645653641,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650645653641,
      "stop" : 1650645653641,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0x33d3c5c4b92ee9ff0408e90ad5aa142b19be0b07 want 10000000000000000'}) tblen=6>",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransactionsValidation object at 0x7f6b64767340>\ngas_limit = 1, gas_price = None, expected_message = 'gas limit reached'\n\n    @pytest.mark.parametrize(\"gas_limit,gas_price,expected_message\", GAS_LIMIT_AND_PRICE_DATA)\n    def test_generate_bad_sign(self, gas_limit, gas_price, expected_message):\n        \"\"\"Generate bad sign (when v, r, s over allowed size)\n        Too low gas_limit\n        Too high gas_limit > u64::max\n        Too high gas_limit > u64::max\n        Too high gas_price > u64::max\n        Too high gas_limit * gas_price > u64::max\n        \"\"\"\n    \n        #\n        amount = 0\n        sender_account = self.create_account_with_balance(amount)\n        recipient_account = self.create_account_with_balance()\n        #\n    \n>       self.process_transaction_with_failure(\n            # self.sender_account,\n            # self.recipient_account,\n            sender_account,\n            recipient_account,\n            amount=InputData.DEFAULT_TRANSFER_AMOUNT.value,\n            gas=gas_limit,\n            gas_price=gas_price,\n            error_message=expected_message,\n        )\n\nintegration/tests/basic/test_transfers.py:267: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_transfers.TestTransactionsValidation object at 0x7f6b64767340>\nsender_account = <eth_account.signers.local.LocalAccount object at 0x7f6b647a08e0>\nrecipient_account = <eth_account.signers.local.LocalAccount object at 0x7f6b647a0b80>\namount = 0.01, gas = 1, gas_price = None, error_message = 'gas limit reached'\n\n    def process_transaction_with_failure(\n        self,\n        sender_account: Account,\n        # <<<<<<< HEAD\n        #         recipient_account: Union[Account, AccountData],\n        #         amount: int,\n        #         gas: Optional[int] = 0,\n        #         gas_price: Optional[int] = None,\n        #         error_message: str = \"\",\n        #     ) -> Union[web3.types.TxReceipt, None]:\n        #         \"\"\"Processes transaction, expects a failure\"\"\"\n        #         tx: Union[web3.types.TxReceipt, None] = None\n        #         with allure.step(f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"):\n        #             with pytest.raises(Exception) as error_info:\n        #                 tx = self.web3_client.send_neon(sender_account, recipient_account, amount, gas, gas_price)\n        #             if error_info != None:\n        #                 if error_message:\n        #                     assert error_message in str(error_info), f\"Expected {error_message} to be in {error_info}\"\n        #                 assert None != error_info, \"Transaction failed\"\n        #             return tx\n        # =======\n        recipient_account: tp.Union[Account, AccountData],\n        amount: int,\n        gas: Optional[int] = 0,\n        gas_price: Optional[int] = None,\n        error_message: str = \"\",\n    ) -> tp.Union[web3.types.TxReceipt, None]:\n        \"\"\"Processes transaction, expects a failure\"\"\"\n        tx: tp.Union[web3.types.TxReceipt, None] = None\n        with allure.step(f\"Sending {amount} from {sender_account.address} to {recipient_account.address}\"):\n            with pytest.raises(Exception) as error_info:\n                tx = self.web3_client.send_neon(sender_account, recipient_account, amount)\n            assert error_info, \"Transaction not failed\"\n            if error_message:\n>               assert error_message in str(error_info.value), f\"Expected {error_message} to be in {error_info}\"\nE               AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0x33d3c5c4b92ee9ff0408e90ad5aa142b19be0b07 want 10000000000000000'}) tblen=6>\n\nintegration/tests/basic/helpers/basic.py:124: AssertionError",
    "steps" : [ {
      "name" : "Sending 0.01 from 0x33D3C5C4b92Ee9Ff0408E90aD5AA142b19Be0b07 to 0x1eCfC3fB9c3053e00C316eCd3fdAF29F3DBA5A22",
      "time" : {
        "start" : 1650645655012,
        "stop" : 1650645655855,
        "duration" : 843
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0x33d3c5c4b92ee9ff0408e90ad5aa142b19be0b07 want 10000000000000000'}) tblen=6>\n",
      "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/basic/helpers/basic.py\", line 124, in process_transaction_with_failure\n    assert error_message in str(error_info.value), f\"Expected {error_message} to be in {error_info}\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650645673662,
      "stop" : 1650645681247,
      "duration" : 7585
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.007822384662327904223808 NEON 60722.27974616 SOL",
      "time" : {
        "start" : 1650645681070,
        "stop" : 1650645681070,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650645681246,
        "stop" : 1650645681246,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650645681258,
      "stop" : 1650645681259,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: transactions validation"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestTransactionsValidation"
  }, {
    "name" : "host",
    "value" : "fv-az449-876"
  }, {
    "name" : "thread",
    "value" : "1824-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_message",
    "value" : "'gas limit reached'"
  }, {
    "name" : "gas_limit",
    "value" : "1"
  }, {
    "name" : "gas_price",
    "value" : "None"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 7,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 7
      },
      "items" : [ {
        "uid" : "b1f9933e1688fb9d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/979//#testresult/b1f9933e1688fb9d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0x7481c56daf0a65cf499a61a3ab7657874c9af17d want 10000000000000000'}) tblen=6>",
        "time" : {
          "start" : 1650645644498,
          "stop" : 1650645646737,
          "duration" : 2239
        }
      }, {
        "uid" : "f29b3f76955b7287",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/980//#testresult/f29b3f76955b7287",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected gas limit reached to be in <ExceptionInfo ValueError({'code': -32000, 'message': 'insufficient funds for transfer: address 0xb4d30437844cae9ae7b37298bbf5897f78846e18 want 10000000000000000'}) tblen=6>",
        "time" : {
          "start" : 1650645648248,
          "stop" : 1650645650477,
          "duration" : 2229
        }
      }, {
        "uid" : "bab9eb1c6f34724c",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/975//#testresult/bab9eb1c6f34724c",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650644404149,
          "stop" : 1650644405880,
          "duration" : 1731
        }
      }, {
        "uid" : "690c231aa723e17b",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/971//#testresult/690c231aa723e17b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650632986206,
          "stop" : 1650632988432,
          "duration" : 2226
        }
      }, {
        "uid" : "e185ca247b1d5e7",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/969//#testresult/e185ca247b1d5e7",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650631832734,
          "stop" : 1650631834968,
          "duration" : 2234
        }
      }, {
        "uid" : "f209bfb09336be09",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/967//#testresult/f209bfb09336be09",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1650631319896,
          "stop" : 1650631322134,
          "duration" : 2238
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "9739f5c30da7e531.json",
  "parameterValues" : [ "'gas limit reached'", "1", "None" ]
}