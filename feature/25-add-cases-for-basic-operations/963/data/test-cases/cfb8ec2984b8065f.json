{
  "uid" : "cfb8ec2984b8065f",
  "name" : "test_send_neon_from_one_account_to_another[1.1]",
  "fullName" : "integration.tests.basic.test_transfers.TestTransfer#test_send_neon_from_one_account_to_another",
  "historyId" : "ff2420b6a43fdd9d117c55d476cfa1b5",
  "time" : {
    "start" : 1650623845683,
    "stop" : 1650623847621,
    "duration" : 1938
  },
  "description" : "Send neon from one account to another",
  "descriptionHtml" : "<p>Send neon from one account to another</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: expected balance = 9996.945, actual balance = 9996.944",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7f4a99375280>\namount = 1.1\n\n        @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    # <<<<<<< HEAD\n    #     def test_send_neon_from_one_account_to_another(self, amount: Union[int, float], prepare_accounts):\n    #         \"\"\"Send neon from one account to another\"\"\"\n    \n    #         tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n    \n    #         self.assert_balance(\n    #             self.sender_account.address,\n    #             InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n    #         )\n    #         self.assert_balance(self.recipient_account.address, InputData.FAUCET_1ST_REQUEST_AMOUNT.value + amount)\n    # =======\n        def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n            \"\"\"Send neon from one account to another\"\"\"\n            sender_balance = float(self.web3_client.fromWei(self.get_balance(self.sender_account.address), \"ether\"))\n            recipient_balance = float(self.web3_client.fromWei(self.get_balance(self.recipient_account.address), \"ether\"))\n            tx_receipt = self.transfer_neon(self.sender_account, self.recipient_account, amount)\n>           self.assert_balance(\n                self.sender_account.address,\n                sender_balance - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n                rnd_dig=3,\n            )\n\nintegration/tests/basic/test_transfers.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:191: in assert_balance\n    self.check_balance(expected_amount, balance, rnd_dig=rnd_dig)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = 9996.944610898234, actual = 9996.944310811754, rnd_dig = 3\n\n    @staticmethod\n    def check_balance(expected: float, actual: Decimal, rnd_dig: int = InputData.ROUND_DIGITS.value):\n        \"\"\"Compares the balance with expectation\"\"\"\n        expected_dec = round(expected, rnd_dig)\n        actual_dec = round(actual, rnd_dig)\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 9996.945, actual balance = 9996.944\n\nintegration/tests/basic/helpers/basic.py:246: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650623658590,
      "stop" : 1650623658590,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1650623658590,
      "stop" : 1650623658591,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650623658591,
      "stop" : 1650623659583,
      "duration" : 992
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650623659583,
      "stop" : 1650623659583,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650623659584,
      "stop" : 1650623659584,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1650623659584,
      "stop" : 1650623659584,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650623659584,
      "stop" : 1650623659584,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650623834782,
      "stop" : 1650623841294,
      "duration" : 6512
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650623834782,
        "stop" : 1650623834786,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xF564230cAa215B7A18326C07Bd69c9210Fa368f3",
      "time" : {
        "start" : 1650623834786,
        "stop" : 1650623835565,
        "duration" : 779
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.007822291938690010611648 NEON 60728.22535488 SOL",
      "time" : {
        "start" : 1650623841294,
        "stop" : 1650623841294,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650623845682,
      "stop" : 1650623845682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650623845682,
      "stop" : 1650623845682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_env",
    "time" : {
      "start" : 1650623845682,
      "stop" : 1650623845682,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Send neon from one account to another",
    "status" : "failed",
    "statusMessage" : "AssertionError: expected balance = 9996.945, actual balance = 9996.944",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7f4a99375280>\namount = 1.1\n\n        @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    # <<<<<<< HEAD\n    #     def test_send_neon_from_one_account_to_another(self, amount: Union[int, float], prepare_accounts):\n    #         \"\"\"Send neon from one account to another\"\"\"\n    \n    #         tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n    \n    #         self.assert_balance(\n    #             self.sender_account.address,\n    #             InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n    #         )\n    #         self.assert_balance(self.recipient_account.address, InputData.FAUCET_1ST_REQUEST_AMOUNT.value + amount)\n    # =======\n        def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n            \"\"\"Send neon from one account to another\"\"\"\n            sender_balance = float(self.web3_client.fromWei(self.get_balance(self.sender_account.address), \"ether\"))\n            recipient_balance = float(self.web3_client.fromWei(self.get_balance(self.recipient_account.address), \"ether\"))\n            tx_receipt = self.transfer_neon(self.sender_account, self.recipient_account, amount)\n>           self.assert_balance(\n                self.sender_account.address,\n                sender_balance - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n                rnd_dig=3,\n            )\n\nintegration/tests/basic/test_transfers.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:191: in assert_balance\n    self.check_balance(expected_amount, balance, rnd_dig=rnd_dig)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = 9996.944610898234, actual = 9996.944310811754, rnd_dig = 3\n\n    @staticmethod\n    def check_balance(expected: float, actual: Decimal, rnd_dig: int = InputData.ROUND_DIGITS.value):\n        \"\"\"Compares the balance with expectation\"\"\"\n        expected_dec = round(expected, rnd_dig)\n        actual_dec = round(actual, rnd_dig)\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 9996.945, actual balance = 9996.944\n\nintegration/tests/basic/helpers/basic.py:246: AssertionError",
    "steps" : [ {
      "name" : "Sending 1.1 from 0xe9b29E5c92722704087357e0830C516F6A41899f to 0xf64F1e694a177389A13caDA19Fe2Fb29FE0467Fc",
      "time" : {
        "start" : 1650623845946,
        "stop" : 1650623847362,
        "duration" : 1416
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "calculating gas",
      "time" : {
        "start" : 1650623847362,
        "stop" : 1650623847489,
        "duration" : 127
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "tx_receipt",
        "value" : "AttributeDict({'transactionHash': HexBytes('0x752e9f5844873a32cc23b0d71c9879992b60ac2f9a26ed0cacdaee76a078f5e6'), 'transactionIndex': 0, 'blockHash': HexBytes('0x53ff2a5f938e0cb64acbc38ed164047bcd8d98dbf614b32cb2562250e9fc4eac'), 'blockNumber': 4962200, 'from': '0xe9b29E5c92722704087357e0830C516F6A41899f', 'to': '0xf64F1e694a177389A13caDA19Fe2Fb29FE0467Fc', 'gasUsed': 15000, 'cumulativeGasUsed': 15000, 'contractAddress': None, 'logs': [], 'status': 1, 'logsBloom': HexBytes('0x})"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650623855459,
      "stop" : 1650623861268,
      "duration" : 5809
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.007822291960590270051648 NEON 60728.2221818 SOL",
      "time" : {
        "start" : 1650623861142,
        "stop" : 1650623861142,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650623861268,
        "stop" : 1650623861268,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650623861277,
      "stop" : 1650623861278,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: transfer tests"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestTransfer"
  }, {
    "name" : "host",
    "value" : "fv-az129-570"
  }, {
    "name" : "thread",
    "value" : "1838-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "amount",
    "value" : "1.1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "cfb8ec2984b8065f.json",
  "parameterValues" : [ "1.1" ]
}