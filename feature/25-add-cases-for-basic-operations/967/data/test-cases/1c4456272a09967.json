{
  "uid" : "1c4456272a09967",
  "name" : "test_send_neon_from_one_account_to_another[0.01]",
  "fullName" : "integration.tests.basic.test_transfers.TestTransfer#test_send_neon_from_one_account_to_another",
  "historyId" : "468859a02cbbf36eb35dac8ca17be612",
  "time" : {
    "start" : 1650631285765,
    "stop" : 1650631288464,
    "duration" : 2699
  },
  "description" : "Send neon from one account to another",
  "descriptionHtml" : "<p>Send neon from one account to another</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: expected balance = 9999.054, actual balance = 9999.053",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7f8773afeb80>\namount = 0.01\n\n        @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    # <<<<<<< HEAD\n    #     def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n    #         \"\"\"Send neon from one account to another\"\"\"\n    \n    #         tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n    \n    #         self.assert_balance(\n    #             self.sender_account.address,\n    #             InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n    #         )\n    #         self.assert_balance(self.recipient_account.address, InputData.FAUCET_1ST_REQUEST_AMOUNT.value + amount)\n    # =======\n        def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n            \"\"\"Send neon from one account to another\"\"\"\n            sender_balance = float(self.web3_client.fromWei(self.get_balance(self.sender_account.address), \"ether\"))\n            recipient_balance = float(self.web3_client.fromWei(self.get_balance(self.recipient_account.address), \"ether\"))\n            tx_receipt = self.transfer_neon(self.sender_account, self.recipient_account, amount)\n>           self.assert_balance(\n                self.sender_account.address,\n                sender_balance - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n                rnd_dig=3,\n            )\n\nintegration/tests/basic/test_transfers.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:193: in assert_balance\n    self.check_balance(expected_amount, balance, rnd_dig=rnd_dig)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = 9999.053696925268, actual = 9999.053384263269, rnd_dig = 3\n\n    @staticmethod\n    def check_balance(expected: float, actual: Decimal, rnd_dig: int = InputData.ROUND_DIGITS.value):\n        \"\"\"Compares the balance with expectation\"\"\"\n        expected_dec = round(expected, rnd_dig)\n        # TODO: added float()\n        actual_dec =float( round(actual, rnd_dig))\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 9999.054, actual balance = 9999.053\n\nintegration/tests/basic/helpers/basic.py:249: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650631084395,
      "stop" : 1650631084396,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1650631084396,
      "stop" : 1650631084397,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650631084398,
      "stop" : 1650631085430,
      "duration" : 1032
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650631085431,
      "stop" : 1650631085431,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1650631085431,
      "stop" : 1650631085431,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650631085432,
      "stop" : 1650631085432,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650631085432,
      "stop" : 1650631085432,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650631277432,
      "stop" : 1650631277432,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650631277432,
      "stop" : 1650631285764,
      "duration" : 8332
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650631277432,
        "stop" : 1650631277436,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Request 1000 NEON from faucet for 0x6bFF9A0C11E028A7d40A97581E6375577f2384DF",
      "time" : {
        "start" : 1650631277436,
        "stop" : 1650631278292,
        "duration" : 856
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Operator initial balance: 0.007822300860449481660288 NEON 60726.16801536 SOL",
      "time" : {
        "start" : 1650631285764,
        "stop" : 1650631285764,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true,
    "stepsCount" : 3
  }, {
    "name" : "prepare_env",
    "time" : {
      "start" : 1650631285764,
      "stop" : 1650631285764,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650631285764,
      "stop" : 1650631285764,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "Send neon from one account to another",
    "status" : "failed",
    "statusMessage" : "AssertionError: expected balance = 9999.054, actual balance = 9999.053",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7f8773afeb80>\namount = 0.01\n\n        @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    # <<<<<<< HEAD\n    #     def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n    #         \"\"\"Send neon from one account to another\"\"\"\n    \n    #         tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n    \n    #         self.assert_balance(\n    #             self.sender_account.address,\n    #             InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n    #         )\n    #         self.assert_balance(self.recipient_account.address, InputData.FAUCET_1ST_REQUEST_AMOUNT.value + amount)\n    # =======\n        def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n            \"\"\"Send neon from one account to another\"\"\"\n            sender_balance = float(self.web3_client.fromWei(self.get_balance(self.sender_account.address), \"ether\"))\n            recipient_balance = float(self.web3_client.fromWei(self.get_balance(self.recipient_account.address), \"ether\"))\n            tx_receipt = self.transfer_neon(self.sender_account, self.recipient_account, amount)\n>           self.assert_balance(\n                self.sender_account.address,\n                sender_balance - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n                rnd_dig=3,\n            )\n\nintegration/tests/basic/test_transfers.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:193: in assert_balance\n    self.check_balance(expected_amount, balance, rnd_dig=rnd_dig)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = 9999.053696925268, actual = 9999.053384263269, rnd_dig = 3\n\n    @staticmethod\n    def check_balance(expected: float, actual: Decimal, rnd_dig: int = InputData.ROUND_DIGITS.value):\n        \"\"\"Compares the balance with expectation\"\"\"\n        expected_dec = round(expected, rnd_dig)\n        # TODO: added float()\n        actual_dec =float( round(actual, rnd_dig))\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 9999.054, actual balance = 9999.053\n\nintegration/tests/basic/helpers/basic.py:249: AssertionError",
    "steps" : [ {
      "name" : "Sending 0.01 from 0x42C77389DDDEa4edbCa743E29673592564cA1492 to 0x8E2870b05F172A268C4427C8a52f9C38437C5e5b",
      "time" : {
        "start" : 1650631286103,
        "stop" : 1650631288128,
        "duration" : 2025
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "calculating gas",
      "time" : {
        "start" : 1650631288128,
        "stop" : 1650631288292,
        "duration" : 164
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "tx_receipt",
        "value" : "AttributeDict({'transactionHash': HexBytes('0x2f301e9aec3d747f3c6c2f6d49a683eb88ebb9deaaec55539412973a73ca2879'), 'transactionIndex': 0, 'blockHash': HexBytes('0x85c917313cbff6646608d41eaa640856eb87a6982df5a53ce7f2732dbdb2b32c'), 'blockNumber': 4979821, 'from': '0x42C77389DDDEa4edbCa743E29673592564cA1492', 'to': '0x8E2870b05F172A268C4427C8a52f9C38437C5e5b', 'gasUsed': 15000, 'cumulativeGasUsed': 15000, 'contractAddress': None, 'logs': [], 'status': 1, 'logsBloom': HexBytes('0x})"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 2
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650631303986,
      "stop" : 1650631311588,
      "duration" : 7602
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.007822300882387467660288 NEON 60726.14913688 SOL",
      "time" : {
        "start" : 1650631311419,
        "stop" : 1650631311419,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650631311588,
        "stop" : 1650631311588,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true,
    "stepsCount" : 2
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650631346672,
      "stop" : 1650631346673,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: transfer tests"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestTransfer"
  }, {
    "name" : "host",
    "value" : "fv-az445-230"
  }, {
    "name" : "thread",
    "value" : "1825-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "amount",
    "value" : "0.01"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "916feb47c225b160",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25-add-cases-for-basic-operations/963//#testresult/916feb47c225b160",
        "status" : "passed",
        "time" : {
          "start" : 1650623841295,
          "stop" : 1650623843623,
          "duration" : 2328
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1c4456272a09967.json",
  "parameterValues" : [ "0.01" ]
}