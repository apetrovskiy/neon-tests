{
  "uid" : "b4fbc7853bb59b64",
  "name" : "test_send_neon_from_one_account_to_another[1.1]",
  "fullName" : "integration.tests.basic.test_transfers.TestTransfer#test_send_neon_from_one_account_to_another",
  "historyId" : "ff2420b6a43fdd9d117c55d476cfa1b5",
  "time" : {
    "start" : 1650696848709,
    "stop" : 1650696850271,
    "duration" : 1562
  },
  "description" : "Send neon from one account to another",
  "descriptionHtml" : "<p>Send neon from one account to another</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: expected balance = 9997.71, actual balance = 9997.7",
  "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7f47c30ee0d0>\namount = 1.1\n\n    @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    # <<<<<<< HEAD\n    #     def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n    #         \"\"\"Send neon from one account to another\"\"\"\n    \n    #         tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n    \n    #         self.assert_balance(\n    #             self.sender_account.address,\n    #             InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n    #         )\n    #         self.assert_balance(self.recipient_account.address, InputData.FAUCET_1ST_REQUEST_AMOUNT.value + amount)\n    # =======\n    def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n        \"\"\"Send neon from one account to another\"\"\"\n        sender_balance = float(self.web3_client.fromWei(self.get_balance(self.sender_account.address), \"ether\"))\n        recipient_balance = float(self.web3_client.fromWei(self.get_balance(self.recipient_account.address), \"ether\"))\n        # tx_receipt = self.transfer_neon(self.sender_account, self.recipient_account, amount)\n        tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n>       self.assert_balance(\n            self.sender_account.address,\n            sender_balance - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n            # TODO: from 3 to 2\n            rnd_dig=2,\n        )\n\nintegration/tests/basic/test_transfers.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:157: in assert_balance\n    self.check_balance(expected_amount, balance, rnd_dig=rnd_dig)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = 9997.7051314004, actual = 9997.7048878854, rnd_dig = 2\n\n    @staticmethod\n    def check_balance(expected: float, actual: float, rnd_dig: int = InputData.ROUND_DIGITS.value):\n        \"\"\"Compares the balance with expectation\"\"\"\n        expected_dec = round(expected, rnd_dig)\n        # TODO: added float()\n        # actual_dec = float(round(actual, rnd_dig))\n        actual_dec = round(actual, rnd_dig)\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 9997.71, actual balance = 9997.7\n\nintegration/tests/basic/helpers/basic.py:269: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1650696610049,
      "stop" : 1650696610050,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650696610049,
      "stop" : 1650696610049,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650696610051,
      "stop" : 1650696610652,
      "duration" : 601
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650696610652,
      "stop" : 1650696610652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1650696610652,
      "stop" : 1650696610652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650696610652,
      "stop" : 1650696610653,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650696610653,
      "stop" : 1650696610653,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650696840247,
      "stop" : 1650696845353,
      "duration" : 5106
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650696840247,
        "stop" : 1650696840251,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xEc3f84D13d8C6c42a7861231fEEfD4ae7Fe09c71",
      "time" : {
        "start" : 1650696840251,
        "stop" : 1650696840968,
        "duration" : 717
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.007938639396056863426848 NEON 60487.18168676 SOL",
      "time" : {
        "start" : 1650696845353,
        "stop" : 1650696845353,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_env",
    "time" : {
      "start" : 1650696848709,
      "stop" : 1650696848709,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650696848709,
      "stop" : 1650696848709,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650696848709,
      "stop" : 1650696848709,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Send neon from one account to another",
    "status" : "failed",
    "statusMessage" : "AssertionError: expected balance = 9997.71, actual balance = 9997.7",
    "statusTrace" : "self = <integration.tests.basic.test_transfers.TestTransfer object at 0x7f47c30ee0d0>\namount = 1.1\n\n    @pytest.mark.parametrize(\"amount\", TRANSFER_AMOUNT_DATA)\n    # <<<<<<< HEAD\n    #     def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n    #         \"\"\"Send neon from one account to another\"\"\"\n    \n    #         tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n    \n    #         self.assert_balance(\n    #             self.sender_account.address,\n    #             InputData.FAUCET_1ST_REQUEST_AMOUNT.value - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n    #         )\n    #         self.assert_balance(self.recipient_account.address, InputData.FAUCET_1ST_REQUEST_AMOUNT.value + amount)\n    # =======\n    def test_send_neon_from_one_account_to_another(self, amount: Union[int, float]):\n        \"\"\"Send neon from one account to another\"\"\"\n        sender_balance = float(self.web3_client.fromWei(self.get_balance(self.sender_account.address), \"ether\"))\n        recipient_balance = float(self.web3_client.fromWei(self.get_balance(self.recipient_account.address), \"ether\"))\n        # tx_receipt = self.transfer_neon(self.sender_account, self.recipient_account, amount)\n        tx_receipt = self.process_transaction(self.sender_account, self.recipient_account, amount)\n>       self.assert_balance(\n            self.sender_account.address,\n            sender_balance - amount - self.calculate_trx_gas(tx_receipt=tx_receipt),\n            # TODO: from 3 to 2\n            rnd_dig=2,\n        )\n\nintegration/tests/basic/test_transfers.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nintegration/tests/basic/helpers/basic.py:157: in assert_balance\n    self.check_balance(expected_amount, balance, rnd_dig=rnd_dig)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexpected = 9997.7051314004, actual = 9997.7048878854, rnd_dig = 2\n\n    @staticmethod\n    def check_balance(expected: float, actual: float, rnd_dig: int = InputData.ROUND_DIGITS.value):\n        \"\"\"Compares the balance with expectation\"\"\"\n        expected_dec = round(expected, rnd_dig)\n        # TODO: added float()\n        # actual_dec = float(round(actual, rnd_dig))\n        actual_dec = round(actual, rnd_dig)\n    \n>       assert actual_dec == expected_dec, f\"expected balance = {expected_dec}, actual balance = {actual_dec}\"\nE       AssertionError: expected balance = 9997.71, actual balance = 9997.7\n\nintegration/tests/basic/helpers/basic.py:269: AssertionError",
    "steps" : [ {
      "name" : "Sending 1.1 from 0xD7aBE7D2aE48D5AFb774693EE2C942F7Ec5C61B0 to 0x5E78a243Ef19bA79aD25A3f408Bb07C6CE3A2593",
      "time" : {
        "start" : 1650696848910,
        "stop" : 1650696850077,
        "duration" : 1167
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "calculating gas",
      "time" : {
        "start" : 1650696850077,
        "stop" : 1650696850171,
        "duration" : 94
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "tx_receipt",
        "value" : "AttributeDict({'transactionHash': HexBytes('0xe955da1b5b75b7b4c2993111f4318c169d2c3be6eeef829f9db8c8090c1d6025'), 'transactionIndex': 0, 'blockHash': HexBytes('0xd7ce2c08e1489d67e38a0899ce2e8932a2ee0ba165a8a514af83fc6d6a581ff4'), 'blockNumber': 5136831, 'from': '0xD7aBE7D2aE48D5AFb774693EE2C942F7Ec5C61B0', 'to': '0x5E78a243Ef19bA79aD25A3f408Bb07C6CE3A2593', 'gasUsed': 15000, 'cumulativeGasUsed': 15000, 'contractAddress': None, 'logs': [], 'status': 1, 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')})"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650696858041,
      "stop" : 1650696862426,
      "duration" : 4385
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.007938639410543893426848 NEON 60487.16445232 SOL",
      "time" : {
        "start" : 1650696862327,
        "stop" : 1650696862327,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650696862426,
        "stop" : 1650696862426,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650696885774,
      "stop" : 1650696885775,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: transfer tests"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_transfers"
  }, {
    "name" : "subSuite",
    "value" : "TestTransfer"
  }, {
    "name" : "host",
    "value" : "fv-az190-42"
  }, {
    "name" : "thread",
    "value" : "1789-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_transfers"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "amount",
    "value" : "1.1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 5,
        "unknown" : 0,
        "total" : 6
      },
      "items" : [ {
        "uid" : "f962225f1b167f88",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25j/988//#testresult/f962225f1b167f88",
        "status" : "passed",
        "time" : {
          "start" : 1650694475893,
          "stop" : 1650694478405,
          "duration" : 2512
        }
      }, {
        "uid" : "81af044d5dbff6bd",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25j/990//#testresult/81af044d5dbff6bd",
        "status" : "passed",
        "time" : {
          "start" : 1650694423471,
          "stop" : 1650694425118,
          "duration" : 1647
        }
      }, {
        "uid" : "503c0db921a7f627",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25j/985//#testresult/503c0db921a7f627",
        "status" : "passed",
        "time" : {
          "start" : 1650652225199,
          "stop" : 1650652227693,
          "duration" : 2494
        }
      }, {
        "uid" : "da3df498d7569819",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25j/977//#testresult/da3df498d7569819",
        "status" : "passed",
        "time" : {
          "start" : 1650644563580,
          "stop" : 1650644566093,
          "duration" : 2513
        }
      }, {
        "uid" : "d7e124e49921c650",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/25j/973//#testresult/d7e124e49921c650",
        "status" : "passed",
        "time" : {
          "start" : 1650633510541,
          "stop" : 1650633512287,
          "duration" : 1746
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b4fbc7853bb59b64.json",
  "parameterValues" : [ "1.1" ]
}