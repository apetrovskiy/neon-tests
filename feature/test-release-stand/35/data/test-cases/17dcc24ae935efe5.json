{
  "uid" : "17dcc24ae935efe5",
  "name" : "test_send_neon_to_exist_account",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_send_neon_to_exist_account",
  "historyId" : "07ec4851a3f9619fb95689b62d62e710",
  "time" : {
    "start" : 1647880819493,
    "stop" : 1647880831536,
    "duration" : 12043
  },
  "description" : "Verify how many cost neon send to use who was already initialized",
  "descriptionHtml" : "<p>Verify how many cost neon send to use who was already initialized</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% \nassert Decimal('0.00150') > Decimal('0.140621415')",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f16b158a970>\n\n    @pytest.mark.only_stands\n    def test_send_neon_to_exist_account(self):\n        \"\"\"Verify how many cost neon send to use who was already initialized\"\"\"\n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 1)\n    \n        assert self.web3_client.get_balance(acc2) == 1\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n        tx = self.web3_client.send_neon(self.acc, acc2, 5)\n    \n        assert self.web3_client.get_balance(acc2) == 6\n    \n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n        assert sol_balance_before > sol_balance_after, \"Operator balance after send tx doesn't changed\"\n    \n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f16b158a970>\nsol_diff = 1589040, neon_diff = Decimal('0.006')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% \nE           assert Decimal('0.00150') > Decimal('0.140621415')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1647880791605,
      "stop" : 1647880791607,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647880791605,
      "stop" : 1647880791605,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647880791607,
      "stop" : 1647880792250,
      "duration" : 643
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647880792250,
      "stop" : 1647880792251,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647880792250,
      "stop" : 1647880792250,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647880792251,
      "stop" : 1647880793259,
      "duration" : 1008
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647880792251,
      "stop" : 1647880792251,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647880793259,
      "stop" : 1647880793544,
      "duration" : 285
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 88.494572$",
      "time" : {
        "start" : 1647880793544,
        "stop" : 1647880793544,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647880793545,
      "stop" : 1647880799167,
      "duration" : 5622
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647880793545,
        "stop" : 1647880793558,
        "duration" : 13
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x994DA79981D52277357E108ccCC33C1C504CCA8f",
      "time" : {
        "start" : 1647880793558,
        "stop" : 1647880794494,
        "duration" : 936
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000919230761 NEON 72847.88614276 SOL",
      "time" : {
        "start" : 1647880799167,
        "stop" : 1647880799167,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647880819492,
      "stop" : 1647880819492,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647880819492,
      "stop" : 1647880819492,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647880819493,
      "stop" : 1647880819493,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Verify how many cost neon send to use who was already initialized",
    "status" : "failed",
    "statusMessage" : "AssertionError: Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% \nassert Decimal('0.00150') > Decimal('0.140621415')",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f16b158a970>\n\n    @pytest.mark.only_stands\n    def test_send_neon_to_exist_account(self):\n        \"\"\"Verify how many cost neon send to use who was already initialized\"\"\"\n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 1)\n    \n        assert self.web3_client.get_balance(acc2) == 1\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n        tx = self.web3_client.send_neon(self.acc, acc2, 5)\n    \n        assert self.web3_client.get_balance(acc2) == 6\n    \n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n        assert sol_balance_before > sol_balance_after, \"Operator balance after send tx doesn't changed\"\n    \n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f16b158a970>\nsol_diff = 1589040, neon_diff = Decimal('0.006')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% \nE           assert Decimal('0.00150') > Decimal('0.140621415')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
    "steps" : [ {
      "name" : "Verify operator profit",
      "time" : {
        "start" : 1647880831535,
        "stop" : 1647880831536,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% \nassert Decimal('0.00150') > Decimal('0.140621415')\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
      "steps" : [ {
        "name" : "Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% ",
        "time" : {
          "start" : 1647880831535,
          "stop" : 1647880831535,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Operator receive 0.006000000 NEON (0.00 $) and spend 0.001589040 SOL (0.14 $), profit - -98.933306100% \nassert Decimal('0.00150') > Decimal('0.140621415')\n",
        "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "sol_diff",
        "value" : "1589040"
      }, {
        "name" : "neon_diff",
        "value" : "Decimal('0.006')"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647881246618,
      "stop" : 1647881251473,
      "duration" : 4855
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000920031496 NEON 72846.03292364 SOL",
      "time" : {
        "start" : 1647881251265,
        "stop" : 1647881251265,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 593.357556601808 NEON",
      "time" : {
        "start" : 1647881251473,
        "stop" : 1647881251473,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647881251479,
      "stop" : 1647881251480,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "tag",
    "value" : "only_stands"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az196-207"
  }, {
    "name" : "thread",
    "value" : "1923-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Operator economy",
      "messageRegex" : ".*Operator receive.*",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "only_stands" ]
  },
  "source" : "17dcc24ae935efe5.json",
  "parameterValues" : [ ]
}