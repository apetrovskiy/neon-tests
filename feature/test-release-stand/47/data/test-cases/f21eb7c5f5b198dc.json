{
  "uid" : "f21eb7c5f5b198dc",
  "name" : "test_withdraw_neon_unexisting_ata",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_withdraw_neon_unexisting_ata",
  "historyId" : "fa8002c1167dc2e6db891f0b6d29ad54",
  "time" : {
    "start" : 1647886861382,
    "stop" : 1647886867001,
    "duration" : 5619
  },
  "status" : "broken",
  "statusMessage" : "ValueError: InvalidArgument",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f33da4e3ca0>\npytestconfig = <_pytest.config.Config object at 0x7f33e08103a0>\n\n    def test_withdraw_neon_unexisting_ata(self, pytestconfig: Config):\n        sol_user = SolanaAccount()\n        self.sol_client.request_airdrop(sol_user.public_key, 5 * LAMPORT_PER_SOL)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_interface = helpers.get_contract_interface(\"NeonToken.sol\", \"0.8.10\")\n        contract = self.web3_client.eth.contract(\n            address=pytestconfig.environment.neon_erc20wrapper_address, abi=contract_interface[\"abi\"]\n        )\n    \n        user_neon_balance_before = self.web3_client.get_balance(self.acc)\n        move_amount = self.web3_client._web3.toWei(5, \"ether\")\n    \n        instruction_tx = contract.functions.withdraw(bytes(sol_user.public_key)).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"value\": move_amount,\n            }\n        )\n>       receipt = self.web3_client.send_transaction(self.acc, instruction_tx)\n\nintegration/tests/economy/test_economics.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/web3client.py:168: in send_transaction\n    signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: in send_raw_transaction\n    return self._send_raw_transaction(transaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n    result = w3.manager.request_blocking(method_str,\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: in request_blocking\n    return self.formatted_response(response,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f33da6b23a0>\nresponse = {'error': 'InvalidArgument', 'id': 241, 'jsonrpc': '2.0'}\nparams = ('0xf8930485623daddf008318182094053e3d1b12726f648b2e45ceabdf9078b742576d884563918244f40000a48e19899ebedd6a1f732a6d2b69...6d242d6c039c344f1a831390e53edfe66fa9b1fc1a93a65b48a0418a5e03c8484e96f9efb71d788aa7ee82a1697ea1fec53bfc70fe7e826c04da',)\nerror_formatters = <cyfunction identity at 0x7f33dfbd1ee0>\nnull_result_formatters = <cyfunction identity at 0x7f33dfbd1ee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidArgument\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647886721614,
      "stop" : 1647886721614,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1647886721614,
      "stop" : 1647886721616,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647886721616,
      "stop" : 1647886722314,
      "duration" : 698
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647886722314,
      "stop" : 1647886722314,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647886722314,
      "stop" : 1647886722314,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647886722314,
      "stop" : 1647886723248,
      "duration" : 934
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647886722314,
      "stop" : 1647886722314,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647886723249,
      "stop" : 1647886723368,
      "duration" : 119
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 87.86582200000001$",
      "time" : {
        "start" : 1647886723368,
        "stop" : 1647886723368,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647886723369,
      "stop" : 1647886728993,
      "duration" : 5624
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647886723369,
        "stop" : 1647886723380,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x17e32e64d4ca3F7cC1B029c5C831F835776B9d57",
      "time" : {
        "start" : 1647886723380,
        "stop" : 1647886724329,
        "duration" : 949
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000923123638 NEON 72838.93605048 SOL",
      "time" : {
        "start" : 1647886728993,
        "stop" : 1647886728993,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647886861381,
      "stop" : 1647886861381,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647886861381,
      "stop" : 1647886861381,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647886861381,
      "stop" : 1647886861381,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: InvalidArgument",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f33da4e3ca0>\npytestconfig = <_pytest.config.Config object at 0x7f33e08103a0>\n\n    def test_withdraw_neon_unexisting_ata(self, pytestconfig: Config):\n        sol_user = SolanaAccount()\n        self.sol_client.request_airdrop(sol_user.public_key, 5 * LAMPORT_PER_SOL)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_interface = helpers.get_contract_interface(\"NeonToken.sol\", \"0.8.10\")\n        contract = self.web3_client.eth.contract(\n            address=pytestconfig.environment.neon_erc20wrapper_address, abi=contract_interface[\"abi\"]\n        )\n    \n        user_neon_balance_before = self.web3_client.get_balance(self.acc)\n        move_amount = self.web3_client._web3.toWei(5, \"ether\")\n    \n        instruction_tx = contract.functions.withdraw(bytes(sol_user.public_key)).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"value\": move_amount,\n            }\n        )\n>       receipt = self.web3_client.send_transaction(self.acc, instruction_tx)\n\nintegration/tests/economy/test_economics.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/web3client.py:168: in send_transaction\n    signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: in send_raw_transaction\n    return self._send_raw_transaction(transaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n    result = w3.manager.request_blocking(method_str,\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: in request_blocking\n    return self.formatted_response(response,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f33da6b23a0>\nresponse = {'error': 'InvalidArgument', 'id': 241, 'jsonrpc': '2.0'}\nparams = ('0xf8930485623daddf008318182094053e3d1b12726f648b2e45ceabdf9078b742576d884563918244f40000a48e19899ebedd6a1f732a6d2b69...6d242d6c039c344f1a831390e53edfe66fa9b1fc1a93a65b48a0418a5e03c8484e96f9efb71d788aa7ee82a1697ea1fec53bfc70fe7e826c04da',)\nerror_formatters = <cyfunction identity at 0x7f33dfbd1ee0>\nnull_result_formatters = <cyfunction identity at 0x7f33dfbd1ee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidArgument\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c3a64100fe4e2845",
      "name" : "stdout",
      "source" : "c3a64100fe4e2845.txt",
      "type" : "text/plain",
      "size" : 71
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647887176009,
      "stop" : 1647887180830,
      "duration" : 4821
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000923851228 NEON 72837.2987958 SOL",
      "time" : {
        "start" : 1647887180625,
        "stop" : 1647887180625,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 595.088514944 NEON",
      "time" : {
        "start" : 1647887180830,
        "stop" : 1647887180830,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647887180835,
      "stop" : 1647887180836,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az182-211"
  }, {
    "name" : "thread",
    "value" : "1735-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "cd39d1446bb451aa",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/test-release-stand/44//#testresult/cd39d1446bb451aa",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647884013916,
          "stop" : 1647884021325,
          "duration" : 7409
        }
      }, {
        "uid" : "57baa7ace0e64b0a",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/test-release-stand/41//#testresult/57baa7ace0e64b0a",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647882987570,
          "stop" : 1647882996933,
          "duration" : 9363
        }
      }, {
        "uid" : "9bd2c84e66f93c04",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/feature/test-release-stand/35//#testresult/9bd2c84e66f93c04",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647880931688,
          "stop" : 1647880937319,
          "duration" : 5631
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f21eb7c5f5b198dc.json",
  "parameterValues" : [ ]
}