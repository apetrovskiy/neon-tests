{
  "uid" : "b4c911bc9c4a7561",
  "name" : "test_withdraw_neon_unexisting_ata",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_withdraw_neon_unexisting_ata",
  "historyId" : "fa8002c1167dc2e6db891f0b6d29ad54",
  "time" : {
    "start" : 1647884063847,
    "stop" : 1647884073165,
    "duration" : 9318
  },
  "status" : "broken",
  "statusMessage" : "ValueError: InvalidArgument",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f9bbf03d9a0>\npytestconfig = <_pytest.config.Config object at 0x7f9bc53dd2b0>\n\n    def test_withdraw_neon_unexisting_ata(self, pytestconfig: Config):\n        sol_user = SolanaAccount()\n        self.sol_client.request_airdrop(sol_user.public_key, 5 * LAMPORT_PER_SOL)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_interface = helpers.get_contract_interface(\"NeonToken.sol\", \"0.8.10\")\n        contract = self.web3_client.eth.contract(\n            address=pytestconfig.environment.neon_erc20wrapper_address, abi=contract_interface[\"abi\"]\n        )\n    \n        user_neon_balance_before = self.web3_client.get_balance(self.acc)\n        move_amount = self.web3_client._web3.toWei(5, \"ether\")\n    \n        instruction_tx = contract.functions.withdraw(bytes(sol_user.public_key)).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"value\": move_amount,\n            }\n        )\n>       receipt = self.web3_client.send_transaction(self.acc, instruction_tx)\n\nintegration/tests/economy/test_economics.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/web3client.py:168: in send_transaction\n    signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: in send_raw_transaction\n    return self._send_raw_transaction(transaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n    result = w3.manager.request_blocking(method_str,\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: in request_blocking\n    return self.formatted_response(response,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f9bbef7d400>\nresponse = {'error': 'InvalidArgument', 'id': 241, 'jsonrpc': '2.0'}\nparams = ('0xf89304856262df5b008318182094053e3d1b12726f648b2e45ceabdf9078b742576d884563918244f40000a48e19899e446d54080d4764bdf9...4382794665c6a8f8436c64f6bd93deea7b87e0a50e81ad0b2ba05a0bcdeac84167b0f682f019b17914f56c23c8527acad8b848019dd79b7810b3',)\nerror_formatters = <cyfunction identity at 0x7f9bc479eee0>\nnull_result_formatters = <cyfunction identity at 0x7f9bc479eee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidArgument\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647883884735,
      "stop" : 1647883884735,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1647883884735,
      "stop" : 1647883884737,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647883884737,
      "stop" : 1647883885792,
      "duration" : 1055
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647883885792,
      "stop" : 1647883885793,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647883885792,
      "stop" : 1647883885792,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647883885793,
      "stop" : 1647883886918,
      "duration" : 1125
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647883885793,
      "stop" : 1647883885793,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647883886918,
      "stop" : 1647883887231,
      "duration" : 313
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 87.936867$",
      "time" : {
        "start" : 1647883887231,
        "stop" : 1647883887231,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647883887232,
      "stop" : 1647883896278,
      "duration" : 9046
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647883887232,
        "stop" : 1647883887245,
        "duration" : 13
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xb05Ae5A39c47aD50ab01D58de5cE89b0858270B8",
      "time" : {
        "start" : 1647883887245,
        "stop" : 1647883888443,
        "duration" : 1198
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.000922153436 NEON 72841.16802248 SOL",
      "time" : {
        "start" : 1647883896278,
        "stop" : 1647883896278,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647884063846,
      "stop" : 1647884063846,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647884063846,
      "stop" : 1647884063846,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647884063846,
      "stop" : 1647884063846,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: InvalidArgument",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f9bbf03d9a0>\npytestconfig = <_pytest.config.Config object at 0x7f9bc53dd2b0>\n\n    def test_withdraw_neon_unexisting_ata(self, pytestconfig: Config):\n        sol_user = SolanaAccount()\n        self.sol_client.request_airdrop(sol_user.public_key, 5 * LAMPORT_PER_SOL)\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        contract_interface = helpers.get_contract_interface(\"NeonToken.sol\", \"0.8.10\")\n        contract = self.web3_client.eth.contract(\n            address=pytestconfig.environment.neon_erc20wrapper_address, abi=contract_interface[\"abi\"]\n        )\n    \n        user_neon_balance_before = self.web3_client.get_balance(self.acc)\n        move_amount = self.web3_client._web3.toWei(5, \"ether\")\n    \n        instruction_tx = contract.functions.withdraw(bytes(sol_user.public_key)).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"value\": move_amount,\n            }\n        )\n>       receipt = self.web3_client.send_transaction(self.acc, instruction_tx)\n\nintegration/tests/economy/test_economics.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/web3client.py:168: in send_transaction\n    signature = self._web3.eth.send_raw_transaction(instruction_tx.rawTransaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/eth.py:783: in send_raw_transaction\n    return self._send_raw_transaction(transaction)\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/module.py:57: in caller\n    result = w3.manager.request_blocking(method_str,\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:198: in request_blocking\n    return self.formatted_response(response,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <web3.manager.RequestManager object at 0x7f9bbef7d400>\nresponse = {'error': 'InvalidArgument', 'id': 241, 'jsonrpc': '2.0'}\nparams = ('0xf89304856262df5b008318182094053e3d1b12726f648b2e45ceabdf9078b742576d884563918244f40000a48e19899e446d54080d4764bdf9...4382794665c6a8f8436c64f6bd93deea7b87e0a50e81ad0b2ba05a0bcdeac84167b0f682f019b17914f56c23c8527acad8b848019dd79b7810b3',)\nerror_formatters = <cyfunction identity at 0x7f9bc479eee0>\nnull_result_formatters = <cyfunction identity at 0x7f9bc479eee0>\n\n    def formatted_response(\n        self,\n        response: RPCResponse,\n        params: Any,\n        error_formatters: Optional[Callable[..., Any]] = None,\n        null_result_formatters: Optional[Callable[..., Any]] = None,\n    ) -> Any:\n        if \"error\" in response:\n            apply_error_formatters(error_formatters, response)\n>           raise ValueError(response[\"error\"])\nE           ValueError: InvalidArgument\n\n/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/web3/manager.py:171: ValueError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4015551e8ce437bc",
      "name" : "stdout",
      "source" : "4015551e8ce437bc.txt",
      "type" : "text/plain",
      "size" : 71
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647884554868,
      "stop" : 1647884562980,
      "duration" : 8112
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.000923123638 NEON 72838.93761452 SOL",
      "time" : {
        "start" : 1647884562633,
        "stop" : 1647884562633,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 594.938086168592 NEON",
      "time" : {
        "start" : 1647884562980,
        "stop" : 1647884562980,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647884562986,
      "stop" : 1647884562987,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az460-311"
  }, {
    "name" : "thread",
    "value" : "1770-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "9748f0b25de4a152",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/devnet-aws/feature/test-release-stand/43//#testresult/9748f0b25de4a152",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647882999153,
          "stop" : 1647883008554,
          "duration" : 9401
        }
      }, {
        "uid" : "932e02be0d245745",
        "reportUrl" : "https://apetrovskiy.github.io/neon-tests/devnet-aws/feature/test-release-stand/37//#testresult/932e02be0d245745",
        "status" : "broken",
        "statusDetails" : "ValueError: InvalidArgument",
        "time" : {
          "start" : 1647880980418,
          "stop" : 1647880989738,
          "duration" : 9320
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b4c911bc9c4a7561.json",
  "parameterValues" : [ ]
}